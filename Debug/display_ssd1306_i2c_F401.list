
display_ssd1306_i2c_F401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028a4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002114  08002a38  08002a38  00012a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b4c  08004b4c  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08004b4c  08004b4c  00014b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b54  08004b54  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b54  08004b54  00014b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b58  08004b58  00014b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08004b5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000047c  2000001c  08004b78  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000498  08004b78  00020498  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007811  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016f3  00000000  00000000  000278a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007c0  00000000  00000000  00028f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005ef  00000000  00000000  00029758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000156be  00000000  00000000  00029d47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a24c  00000000  00000000  0003f405  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008460f  00000000  00000000  00049651  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001fac  00000000  00000000  000cdc60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  000cfc0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000001c 	.word	0x2000001c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002a20 	.word	0x08002a20

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000020 	.word	0x20000020
 80001d0:	08002a20 	.word	0x08002a20

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b970 	b.w	80004cc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	460f      	mov	r7, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4694      	mov	ip, r2
 8000218:	d965      	bls.n	80002e6 <__udivmoddi4+0xe2>
 800021a:	fab2 f382 	clz	r3, r2
 800021e:	b143      	cbz	r3, 8000232 <__udivmoddi4+0x2e>
 8000220:	fa02 fc03 	lsl.w	ip, r2, r3
 8000224:	f1c3 0220 	rsb	r2, r3, #32
 8000228:	409f      	lsls	r7, r3
 800022a:	fa20 f202 	lsr.w	r2, r0, r2
 800022e:	4317      	orrs	r7, r2
 8000230:	409c      	lsls	r4, r3
 8000232:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000236:	fa1f f58c 	uxth.w	r5, ip
 800023a:	fbb7 f1fe 	udiv	r1, r7, lr
 800023e:	0c22      	lsrs	r2, r4, #16
 8000240:	fb0e 7711 	mls	r7, lr, r1, r7
 8000244:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000248:	fb01 f005 	mul.w	r0, r1, r5
 800024c:	4290      	cmp	r0, r2
 800024e:	d90a      	bls.n	8000266 <__udivmoddi4+0x62>
 8000250:	eb1c 0202 	adds.w	r2, ip, r2
 8000254:	f101 37ff 	add.w	r7, r1, #4294967295
 8000258:	f080 811c 	bcs.w	8000494 <__udivmoddi4+0x290>
 800025c:	4290      	cmp	r0, r2
 800025e:	f240 8119 	bls.w	8000494 <__udivmoddi4+0x290>
 8000262:	3902      	subs	r1, #2
 8000264:	4462      	add	r2, ip
 8000266:	1a12      	subs	r2, r2, r0
 8000268:	b2a4      	uxth	r4, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000276:	fb00 f505 	mul.w	r5, r0, r5
 800027a:	42a5      	cmp	r5, r4
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x90>
 800027e:	eb1c 0404 	adds.w	r4, ip, r4
 8000282:	f100 32ff 	add.w	r2, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x294>
 800028a:	42a5      	cmp	r5, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x294>
 8000290:	4464      	add	r4, ip
 8000292:	3802      	subs	r0, #2
 8000294:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000298:	1b64      	subs	r4, r4, r5
 800029a:	2100      	movs	r1, #0
 800029c:	b11e      	cbz	r6, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40dc      	lsrs	r4, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	e9c6 4300 	strd	r4, r3, [r6]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0xbc>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ed 	beq.w	800048e <__udivmoddi4+0x28a>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d149      	bne.n	800035c <__udivmoddi4+0x158>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xce>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb65 0203 	sbc.w	r2, r5, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	4617      	mov	r7, r2
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d0e2      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	e9c6 4700 	strd	r4, r7, [r6]
 80002e4:	e7df      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xe6>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2101      	movs	r1, #1
 8000300:	fbb2 f5f7 	udiv	r5, r2, r7
 8000304:	fb07 2015 	mls	r0, r7, r5, r2
 8000308:	0c22      	lsrs	r2, r4, #16
 800030a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030e:	fb0e f005 	mul.w	r0, lr, r5
 8000312:	4290      	cmp	r0, r2
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x124>
 8000316:	eb1c 0202 	adds.w	r2, ip, r2
 800031a:	f105 38ff 	add.w	r8, r5, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4290      	cmp	r0, r2
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000326:	4645      	mov	r5, r8
 8000328:	1a12      	subs	r2, r2, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000330:	fb07 2210 	mls	r2, r7, r0, r2
 8000334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 32ff 	add.w	r2, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2c2>
 8000350:	4610      	mov	r0, r2
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035a:	e79f      	b.n	800029c <__udivmoddi4+0x98>
 800035c:	f1c1 0720 	rsb	r7, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa05 f401 	lsl.w	r4, r5, r1
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	40fd      	lsrs	r5, r7
 8000374:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	fb09 5518 	mls	r5, r9, r8, r5
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb08 f50e 	mul.w	r5, r8, lr
 8000390:	42a5      	cmp	r5, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	fa00 f001 	lsl.w	r0, r0, r1
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	b29d      	uxth	r5, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003da:	3b02      	subs	r3, #2
 80003dc:	4464      	add	r4, ip
 80003de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e2:	fba3 9502 	umull	r9, r5, r3, r2
 80003e6:	eba4 040e 	sub.w	r4, r4, lr
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46ae      	mov	lr, r5
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x29c>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x298>
 80003f4:	b156      	cbz	r6, 800040c <__udivmoddi4+0x208>
 80003f6:	ebb0 0208 	subs.w	r2, r0, r8
 80003fa:	eb64 040e 	sbc.w	r4, r4, lr
 80003fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000402:	40ca      	lsrs	r2, r1
 8000404:	40cc      	lsrs	r4, r1
 8000406:	4317      	orrs	r7, r2
 8000408:	e9c6 7400 	strd	r7, r4, [r6]
 800040c:	4618      	mov	r0, r3
 800040e:	2100      	movs	r1, #0
 8000410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000414:	f1c3 0120 	rsb	r1, r3, #32
 8000418:	fa02 fc03 	lsl.w	ip, r2, r3
 800041c:	fa20 f201 	lsr.w	r2, r0, r1
 8000420:	fa25 f101 	lsr.w	r1, r5, r1
 8000424:	409d      	lsls	r5, r3
 8000426:	432a      	orrs	r2, r5
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1510 	mls	r5, r7, r0, r1
 8000438:	0c11      	lsrs	r1, r2, #16
 800043a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043e:	fb00 f50e 	mul.w	r5, r0, lr
 8000442:	428d      	cmp	r5, r1
 8000444:	fa04 f403 	lsl.w	r4, r4, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x258>
 800044a:	eb1c 0101 	adds.w	r1, ip, r1
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	428d      	cmp	r5, r1
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000458:	3802      	subs	r0, #2
 800045a:	4461      	add	r1, ip
 800045c:	1b49      	subs	r1, r1, r5
 800045e:	b292      	uxth	r2, r2
 8000460:	fbb1 f5f7 	udiv	r5, r1, r7
 8000464:	fb07 1115 	mls	r1, r7, r5, r1
 8000468:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800046c:	fb05 f10e 	mul.w	r1, r5, lr
 8000470:	4291      	cmp	r1, r2
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x282>
 8000474:	eb1c 0202 	adds.w	r2, ip, r2
 8000478:	f105 38ff 	add.w	r8, r5, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	4291      	cmp	r1, r2
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2a8>
 8000482:	3d02      	subs	r5, #2
 8000484:	4462      	add	r2, ip
 8000486:	1a52      	subs	r2, r2, r1
 8000488:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0xfc>
 800048e:	4631      	mov	r1, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000494:	4639      	mov	r1, r7
 8000496:	e6e6      	b.n	8000266 <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x90>
 800049c:	4548      	cmp	r0, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a8:	3b01      	subs	r3, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004ac:	4645      	mov	r5, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x282>
 80004b0:	462b      	mov	r3, r5
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1da>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x258>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3d02      	subs	r5, #2
 80004be:	4462      	add	r2, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x124>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xd8>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x14e>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b084      	sub	sp, #16
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d6:	f000 fd5d 	bl	8000f94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004da:	f000 f88d 	bl	80005f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004de:	f000 f919 	bl	8000714 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004e2:	f000 f8e9 	bl	80006b8 <MX_I2C1_Init>
//  HAL_Delay(10);
//  HAL_I2C_Master_Transmit(&hi2c1, ADDRESS_SSD1306, myArray, sizeof(myArray), 5000);
//  uint8_t pData2[] = {0};
//  HAL_I2C_Master_Receive(&hi2c1, ADDRESS_SSD1306, pData2, sizeof(pData2), 100);

  SSD1306_Init();
 80004e6:	f000 f9b7 	bl	8000858 <SSD1306_Init>
    char snum[5];

    SSD1306_GotoXY (0,0);
 80004ea:	2100      	movs	r1, #0
 80004ec:	2000      	movs	r0, #0
 80004ee:	f000 fb1d 	bl	8000b2c <SSD1306_GotoXY>
    SSD1306_Puts ("NIZAR", &Font_11x18, 1);
 80004f2:	2201      	movs	r2, #1
 80004f4:	493a      	ldr	r1, [pc, #232]	; (80005e0 <main+0x110>)
 80004f6:	483b      	ldr	r0, [pc, #236]	; (80005e4 <main+0x114>)
 80004f8:	f000 fbae 	bl	8000c58 <SSD1306_Puts>
    SSD1306_GotoXY (0, 30);
 80004fc:	211e      	movs	r1, #30
 80004fe:	2000      	movs	r0, #0
 8000500:	f000 fb14 	bl	8000b2c <SSD1306_GotoXY>
    SSD1306_Puts ("MOHIDEEN", &Font_11x18, 1);
 8000504:	2201      	movs	r2, #1
 8000506:	4936      	ldr	r1, [pc, #216]	; (80005e0 <main+0x110>)
 8000508:	4837      	ldr	r0, [pc, #220]	; (80005e8 <main+0x118>)
 800050a:	f000 fba5 	bl	8000c58 <SSD1306_Puts>
    SSD1306_UpdateScreen();
 800050e:	f000 fa67 	bl	80009e0 <SSD1306_UpdateScreen>
    HAL_Delay (1000);
 8000512:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000516:	f000 fdaf 	bl	8001078 <HAL_Delay>

    SSD1306_ScrollRight(0,7);
 800051a:	2107      	movs	r1, #7
 800051c:	2000      	movs	r0, #0
 800051e:	f000 f926 	bl	800076e <SSD1306_ScrollRight>
    HAL_Delay(3000);
 8000522:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000526:	f000 fda7 	bl	8001078 <HAL_Delay>
    SSD1306_ScrollLeft(0,7);
 800052a:	2107      	movs	r1, #7
 800052c:	2000      	movs	r0, #0
 800052e:	f000 f954 	bl	80007da <SSD1306_ScrollLeft>
    HAL_Delay(3000);
 8000532:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000536:	f000 fd9f 	bl	8001078 <HAL_Delay>
    SSD1306_Stopscroll();
 800053a:	f000 f984 	bl	8000846 <SSD1306_Stopscroll>
    SSD1306_Clear();
 800053e:	f000 fbb0 	bl	8000ca2 <SSD1306_Clear>
    SSD1306_GotoXY (35,0);
 8000542:	2100      	movs	r1, #0
 8000544:	2023      	movs	r0, #35	; 0x23
 8000546:	f000 faf1 	bl	8000b2c <SSD1306_GotoXY>
    SSD1306_Puts ("SCORE", &Font_11x18, 1);
 800054a:	2201      	movs	r2, #1
 800054c:	4924      	ldr	r1, [pc, #144]	; (80005e0 <main+0x110>)
 800054e:	4827      	ldr	r0, [pc, #156]	; (80005ec <main+0x11c>)
 8000550:	f000 fb82 	bl	8000c58 <SSD1306_Puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  for ( int x = 1; x <= 10000 ; x++ )
 8000554:	2301      	movs	r3, #1
 8000556:	60fb      	str	r3, [r7, #12]
 8000558:	e03c      	b.n	80005d4 <main+0x104>
	  	{
	  		itoa(x, snum, 10);
 800055a:	1d3b      	adds	r3, r7, #4
 800055c:	220a      	movs	r2, #10
 800055e:	4619      	mov	r1, r3
 8000560:	68f8      	ldr	r0, [r7, #12]
 8000562:	f002 f9ed 	bl	8002940 <itoa>
	  		SSD1306_GotoXY (0, 30);
 8000566:	211e      	movs	r1, #30
 8000568:	2000      	movs	r0, #0
 800056a:	f000 fadf 	bl	8000b2c <SSD1306_GotoXY>
	  		SSD1306_Puts ("             ", &Font_16x26, 1);
 800056e:	2201      	movs	r2, #1
 8000570:	491f      	ldr	r1, [pc, #124]	; (80005f0 <main+0x120>)
 8000572:	4820      	ldr	r0, [pc, #128]	; (80005f4 <main+0x124>)
 8000574:	f000 fb70 	bl	8000c58 <SSD1306_Puts>
	  		SSD1306_UpdateScreen();
 8000578:	f000 fa32 	bl	80009e0 <SSD1306_UpdateScreen>
	  		if(x < 10) {
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	2b09      	cmp	r3, #9
 8000580:	dc04      	bgt.n	800058c <main+0xbc>
	  			SSD1306_GotoXY (53, 30);  // 1 DIGIT
 8000582:	211e      	movs	r1, #30
 8000584:	2035      	movs	r0, #53	; 0x35
 8000586:	f000 fad1 	bl	8000b2c <SSD1306_GotoXY>
 800058a:	e014      	b.n	80005b6 <main+0xe6>
	  		}
	  		else if (x < 100 ) {
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	2b63      	cmp	r3, #99	; 0x63
 8000590:	dc04      	bgt.n	800059c <main+0xcc>
	  			SSD1306_GotoXY (45, 30);  // 2 DIGITS
 8000592:	211e      	movs	r1, #30
 8000594:	202d      	movs	r0, #45	; 0x2d
 8000596:	f000 fac9 	bl	8000b2c <SSD1306_GotoXY>
 800059a:	e00c      	b.n	80005b6 <main+0xe6>
	  		}
	  		else if (x < 1000 ) {
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80005a2:	da04      	bge.n	80005ae <main+0xde>
	  			SSD1306_GotoXY (37, 30);  // 3 DIGITS
 80005a4:	211e      	movs	r1, #30
 80005a6:	2025      	movs	r0, #37	; 0x25
 80005a8:	f000 fac0 	bl	8000b2c <SSD1306_GotoXY>
 80005ac:	e003      	b.n	80005b6 <main+0xe6>
	  		}
	  		else {
	  			SSD1306_GotoXY (30, 30);  // 4 DIGIS
 80005ae:	211e      	movs	r1, #30
 80005b0:	201e      	movs	r0, #30
 80005b2:	f000 fabb 	bl	8000b2c <SSD1306_GotoXY>
	  		}
	  		SSD1306_Puts (snum, &Font_16x26, 1);
 80005b6:	1d3b      	adds	r3, r7, #4
 80005b8:	2201      	movs	r2, #1
 80005ba:	490d      	ldr	r1, [pc, #52]	; (80005f0 <main+0x120>)
 80005bc:	4618      	mov	r0, r3
 80005be:	f000 fb4b 	bl	8000c58 <SSD1306_Puts>
	  		SSD1306_UpdateScreen();
 80005c2:	f000 fa0d 	bl	80009e0 <SSD1306_UpdateScreen>
	  		HAL_Delay (500);
 80005c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005ca:	f000 fd55 	bl	8001078 <HAL_Delay>
	  for ( int x = 1; x <= 10000 ; x++ )
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	3301      	adds	r3, #1
 80005d2:	60fb      	str	r3, [r7, #12]
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	f242 7210 	movw	r2, #10000	; 0x2710
 80005da:	4293      	cmp	r3, r2
 80005dc:	ddbd      	ble.n	800055a <main+0x8a>
 80005de:	e7b9      	b.n	8000554 <main+0x84>
 80005e0:	20000000 	.word	0x20000000
 80005e4:	08002a38 	.word	0x08002a38
 80005e8:	08002a40 	.word	0x08002a40
 80005ec:	08002a4c 	.word	0x08002a4c
 80005f0:	20000008 	.word	0x20000008
 80005f4:	08002a54 	.word	0x08002a54

080005f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b094      	sub	sp, #80	; 0x50
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	f107 0320 	add.w	r3, r7, #32
 8000602:	2230      	movs	r2, #48	; 0x30
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f002 f9de 	bl	80029c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800061c:	2300      	movs	r3, #0
 800061e:	60bb      	str	r3, [r7, #8]
 8000620:	4b23      	ldr	r3, [pc, #140]	; (80006b0 <SystemClock_Config+0xb8>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000624:	4a22      	ldr	r2, [pc, #136]	; (80006b0 <SystemClock_Config+0xb8>)
 8000626:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800062a:	6413      	str	r3, [r2, #64]	; 0x40
 800062c:	4b20      	ldr	r3, [pc, #128]	; (80006b0 <SystemClock_Config+0xb8>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000638:	2300      	movs	r3, #0
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	4b1d      	ldr	r3, [pc, #116]	; (80006b4 <SystemClock_Config+0xbc>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000644:	4a1b      	ldr	r2, [pc, #108]	; (80006b4 <SystemClock_Config+0xbc>)
 8000646:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800064a:	6013      	str	r3, [r2, #0]
 800064c:	4b19      	ldr	r3, [pc, #100]	; (80006b4 <SystemClock_Config+0xbc>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000658:	2302      	movs	r3, #2
 800065a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800065c:	2301      	movs	r3, #1
 800065e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000660:	2310      	movs	r3, #16
 8000662:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000664:	2300      	movs	r3, #0
 8000666:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000668:	f107 0320 	add.w	r3, r7, #32
 800066c:	4618      	mov	r0, r3
 800066e:	f001 fd0b 	bl	8002088 <HAL_RCC_OscConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000678:	f000 f874 	bl	8000764 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067c:	230f      	movs	r3, #15
 800067e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000680:	2300      	movs	r3, #0
 8000682:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000690:	f107 030c 	add.w	r3, r7, #12
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f001 ff6e 	bl	8002578 <HAL_RCC_ClockConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006a2:	f000 f85f 	bl	8000764 <Error_Handler>
  }
}
 80006a6:	bf00      	nop
 80006a8:	3750      	adds	r7, #80	; 0x50
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40007000 	.word	0x40007000

080006b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006bc:	4b13      	ldr	r3, [pc, #76]	; (800070c <MX_I2C1_Init+0x54>)
 80006be:	4a14      	ldr	r2, [pc, #80]	; (8000710 <MX_I2C1_Init+0x58>)
 80006c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 20000;
 80006c2:	4b12      	ldr	r3, [pc, #72]	; (800070c <MX_I2C1_Init+0x54>)
 80006c4:	f644 6220 	movw	r2, #20000	; 0x4e20
 80006c8:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006ca:	4b10      	ldr	r3, [pc, #64]	; (800070c <MX_I2C1_Init+0x54>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006d0:	4b0e      	ldr	r3, [pc, #56]	; (800070c <MX_I2C1_Init+0x54>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006d6:	4b0d      	ldr	r3, [pc, #52]	; (800070c <MX_I2C1_Init+0x54>)
 80006d8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006dc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006de:	4b0b      	ldr	r3, [pc, #44]	; (800070c <MX_I2C1_Init+0x54>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006e4:	4b09      	ldr	r3, [pc, #36]	; (800070c <MX_I2C1_Init+0x54>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ea:	4b08      	ldr	r3, [pc, #32]	; (800070c <MX_I2C1_Init+0x54>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006f0:	4b06      	ldr	r3, [pc, #24]	; (800070c <MX_I2C1_Init+0x54>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006f6:	4805      	ldr	r0, [pc, #20]	; (800070c <MX_I2C1_Init+0x54>)
 80006f8:	f000 ff4c 	bl	8001594 <HAL_I2C_Init>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8000702:	f000 f82f 	bl	8000764 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	20000038 	.word	0x20000038
 8000710:	40005400 	.word	0x40005400

08000714 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	4b10      	ldr	r3, [pc, #64]	; (8000760 <MX_GPIO_Init+0x4c>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a0f      	ldr	r2, [pc, #60]	; (8000760 <MX_GPIO_Init+0x4c>)
 8000724:	f043 0301 	orr.w	r3, r3, #1
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b0d      	ldr	r3, [pc, #52]	; (8000760 <MX_GPIO_Init+0x4c>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	603b      	str	r3, [r7, #0]
 800073a:	4b09      	ldr	r3, [pc, #36]	; (8000760 <MX_GPIO_Init+0x4c>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a08      	ldr	r2, [pc, #32]	; (8000760 <MX_GPIO_Init+0x4c>)
 8000740:	f043 0302 	orr.w	r3, r3, #2
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4b06      	ldr	r3, [pc, #24]	; (8000760 <MX_GPIO_Init+0x4c>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f003 0302 	and.w	r3, r3, #2
 800074e:	603b      	str	r3, [r7, #0]
 8000750:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000752:	bf00      	nop
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	40023800 	.word	0x40023800

08000764 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000768:	b672      	cpsid	i
}
 800076a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800076c:	e7fe      	b.n	800076c <Error_Handler+0x8>

0800076e <SSD1306_ScrollRight>:
#define SSD1306_NORMALDISPLAY       0xA6
#define SSD1306_INVERTDISPLAY       0xA7


void SSD1306_ScrollRight(uint8_t start_row, uint8_t end_row)
{
 800076e:	b580      	push	{r7, lr}
 8000770:	b082      	sub	sp, #8
 8000772:	af00      	add	r7, sp, #0
 8000774:	4603      	mov	r3, r0
 8000776:	460a      	mov	r2, r1
 8000778:	71fb      	strb	r3, [r7, #7]
 800077a:	4613      	mov	r3, r2
 800077c:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_RIGHT_HORIZONTAL_SCROLL);  // send 0x26
 800077e:	2226      	movs	r2, #38	; 0x26
 8000780:	2180      	movs	r1, #128	; 0x80
 8000782:	2078      	movs	r0, #120	; 0x78
 8000784:	f000 fb12 	bl	8000dac <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 8000788:	2200      	movs	r2, #0
 800078a:	2180      	movs	r1, #128	; 0x80
 800078c:	2078      	movs	r0, #120	; 0x78
 800078e:	f000 fb0d 	bl	8000dac <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	461a      	mov	r2, r3
 8000796:	2180      	movs	r1, #128	; 0x80
 8000798:	2078      	movs	r0, #120	; 0x78
 800079a:	f000 fb07 	bl	8000dac <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 800079e:	2200      	movs	r2, #0
 80007a0:	2180      	movs	r1, #128	; 0x80
 80007a2:	2078      	movs	r0, #120	; 0x78
 80007a4:	f000 fb02 	bl	8000dac <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 80007a8:	79bb      	ldrb	r3, [r7, #6]
 80007aa:	461a      	mov	r2, r3
 80007ac:	2180      	movs	r1, #128	; 0x80
 80007ae:	2078      	movs	r0, #120	; 0x78
 80007b0:	f000 fafc 	bl	8000dac <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 80007b4:	2200      	movs	r2, #0
 80007b6:	2180      	movs	r1, #128	; 0x80
 80007b8:	2078      	movs	r0, #120	; 0x78
 80007ba:	f000 faf7 	bl	8000dac <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 80007be:	22ff      	movs	r2, #255	; 0xff
 80007c0:	2180      	movs	r1, #128	; 0x80
 80007c2:	2078      	movs	r0, #120	; 0x78
 80007c4:	f000 faf2 	bl	8000dac <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 80007c8:	222f      	movs	r2, #47	; 0x2f
 80007ca:	2180      	movs	r1, #128	; 0x80
 80007cc:	2078      	movs	r0, #120	; 0x78
 80007ce:	f000 faed 	bl	8000dac <ssd1306_I2C_Write>
}
 80007d2:	bf00      	nop
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}

080007da <SSD1306_ScrollLeft>:


void SSD1306_ScrollLeft(uint8_t start_row, uint8_t end_row)
{
 80007da:	b580      	push	{r7, lr}
 80007dc:	b082      	sub	sp, #8
 80007de:	af00      	add	r7, sp, #0
 80007e0:	4603      	mov	r3, r0
 80007e2:	460a      	mov	r2, r1
 80007e4:	71fb      	strb	r3, [r7, #7]
 80007e6:	4613      	mov	r3, r2
 80007e8:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_LEFT_HORIZONTAL_SCROLL);  // send 0x26
 80007ea:	2227      	movs	r2, #39	; 0x27
 80007ec:	2180      	movs	r1, #128	; 0x80
 80007ee:	2078      	movs	r0, #120	; 0x78
 80007f0:	f000 fadc 	bl	8000dac <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 80007f4:	2200      	movs	r2, #0
 80007f6:	2180      	movs	r1, #128	; 0x80
 80007f8:	2078      	movs	r0, #120	; 0x78
 80007fa:	f000 fad7 	bl	8000dac <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 80007fe:	79fb      	ldrb	r3, [r7, #7]
 8000800:	461a      	mov	r2, r3
 8000802:	2180      	movs	r1, #128	; 0x80
 8000804:	2078      	movs	r0, #120	; 0x78
 8000806:	f000 fad1 	bl	8000dac <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 800080a:	2200      	movs	r2, #0
 800080c:	2180      	movs	r1, #128	; 0x80
 800080e:	2078      	movs	r0, #120	; 0x78
 8000810:	f000 facc 	bl	8000dac <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 8000814:	79bb      	ldrb	r3, [r7, #6]
 8000816:	461a      	mov	r2, r3
 8000818:	2180      	movs	r1, #128	; 0x80
 800081a:	2078      	movs	r0, #120	; 0x78
 800081c:	f000 fac6 	bl	8000dac <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 8000820:	2200      	movs	r2, #0
 8000822:	2180      	movs	r1, #128	; 0x80
 8000824:	2078      	movs	r0, #120	; 0x78
 8000826:	f000 fac1 	bl	8000dac <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 800082a:	22ff      	movs	r2, #255	; 0xff
 800082c:	2180      	movs	r1, #128	; 0x80
 800082e:	2078      	movs	r0, #120	; 0x78
 8000830:	f000 fabc 	bl	8000dac <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 8000834:	222f      	movs	r2, #47	; 0x2f
 8000836:	2180      	movs	r1, #128	; 0x80
 8000838:	2078      	movs	r0, #120	; 0x78
 800083a:	f000 fab7 	bl	8000dac <ssd1306_I2C_Write>
}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}

08000846 <SSD1306_Stopscroll>:
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL);
}


void SSD1306_Stopscroll(void)
{
 8000846:	b580      	push	{r7, lr}
 8000848:	af00      	add	r7, sp, #0
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800084a:	222e      	movs	r2, #46	; 0x2e
 800084c:	2180      	movs	r1, #128	; 0x80
 800084e:	2078      	movs	r0, #120	; 0x78
 8000850:	f000 faac 	bl	8000dac <ssd1306_I2C_Write>
}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}

08000858 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800085e:	f000 fa29 	bl	8000cb4 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000862:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000866:	2201      	movs	r2, #1
 8000868:	2178      	movs	r1, #120	; 0x78
 800086a:	485b      	ldr	r0, [pc, #364]	; (80009d8 <SSD1306_Init+0x180>)
 800086c:	f001 f8d4 	bl	8001a18 <HAL_I2C_IsDeviceReady>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000876:	2300      	movs	r3, #0
 8000878:	e0a9      	b.n	80009ce <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 800087a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800087e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000880:	e002      	b.n	8000888 <SSD1306_Init+0x30>
		p--;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	3b01      	subs	r3, #1
 8000886:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d1f9      	bne.n	8000882 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800088e:	22ae      	movs	r2, #174	; 0xae
 8000890:	2180      	movs	r1, #128	; 0x80
 8000892:	2078      	movs	r0, #120	; 0x78
 8000894:	f000 fa8a 	bl	8000dac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8000898:	2220      	movs	r2, #32
 800089a:	2180      	movs	r1, #128	; 0x80
 800089c:	2078      	movs	r0, #120	; 0x78
 800089e:	f000 fa85 	bl	8000dac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80008a2:	2210      	movs	r2, #16
 80008a4:	2180      	movs	r1, #128	; 0x80
 80008a6:	2078      	movs	r0, #120	; 0x78
 80008a8:	f000 fa80 	bl	8000dac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80008ac:	22b0      	movs	r2, #176	; 0xb0
 80008ae:	2180      	movs	r1, #128	; 0x80
 80008b0:	2078      	movs	r0, #120	; 0x78
 80008b2:	f000 fa7b 	bl	8000dac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80008b6:	22c8      	movs	r2, #200	; 0xc8
 80008b8:	2180      	movs	r1, #128	; 0x80
 80008ba:	2078      	movs	r0, #120	; 0x78
 80008bc:	f000 fa76 	bl	8000dac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80008c0:	2200      	movs	r2, #0
 80008c2:	2180      	movs	r1, #128	; 0x80
 80008c4:	2078      	movs	r0, #120	; 0x78
 80008c6:	f000 fa71 	bl	8000dac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80008ca:	2210      	movs	r2, #16
 80008cc:	2180      	movs	r1, #128	; 0x80
 80008ce:	2078      	movs	r0, #120	; 0x78
 80008d0:	f000 fa6c 	bl	8000dac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80008d4:	2240      	movs	r2, #64	; 0x40
 80008d6:	2180      	movs	r1, #128	; 0x80
 80008d8:	2078      	movs	r0, #120	; 0x78
 80008da:	f000 fa67 	bl	8000dac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80008de:	2281      	movs	r2, #129	; 0x81
 80008e0:	2180      	movs	r1, #128	; 0x80
 80008e2:	2078      	movs	r0, #120	; 0x78
 80008e4:	f000 fa62 	bl	8000dac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80008e8:	22ff      	movs	r2, #255	; 0xff
 80008ea:	2180      	movs	r1, #128	; 0x80
 80008ec:	2078      	movs	r0, #120	; 0x78
 80008ee:	f000 fa5d 	bl	8000dac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80008f2:	22a1      	movs	r2, #161	; 0xa1
 80008f4:	2180      	movs	r1, #128	; 0x80
 80008f6:	2078      	movs	r0, #120	; 0x78
 80008f8:	f000 fa58 	bl	8000dac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80008fc:	22a6      	movs	r2, #166	; 0xa6
 80008fe:	2180      	movs	r1, #128	; 0x80
 8000900:	2078      	movs	r0, #120	; 0x78
 8000902:	f000 fa53 	bl	8000dac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000906:	22a8      	movs	r2, #168	; 0xa8
 8000908:	2180      	movs	r1, #128	; 0x80
 800090a:	2078      	movs	r0, #120	; 0x78
 800090c:	f000 fa4e 	bl	8000dac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000910:	223f      	movs	r2, #63	; 0x3f
 8000912:	2180      	movs	r1, #128	; 0x80
 8000914:	2078      	movs	r0, #120	; 0x78
 8000916:	f000 fa49 	bl	8000dac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800091a:	22a4      	movs	r2, #164	; 0xa4
 800091c:	2180      	movs	r1, #128	; 0x80
 800091e:	2078      	movs	r0, #120	; 0x78
 8000920:	f000 fa44 	bl	8000dac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000924:	22d3      	movs	r2, #211	; 0xd3
 8000926:	2180      	movs	r1, #128	; 0x80
 8000928:	2078      	movs	r0, #120	; 0x78
 800092a:	f000 fa3f 	bl	8000dac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800092e:	2200      	movs	r2, #0
 8000930:	2180      	movs	r1, #128	; 0x80
 8000932:	2078      	movs	r0, #120	; 0x78
 8000934:	f000 fa3a 	bl	8000dac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000938:	22d5      	movs	r2, #213	; 0xd5
 800093a:	2180      	movs	r1, #128	; 0x80
 800093c:	2078      	movs	r0, #120	; 0x78
 800093e:	f000 fa35 	bl	8000dac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000942:	22f0      	movs	r2, #240	; 0xf0
 8000944:	2180      	movs	r1, #128	; 0x80
 8000946:	2078      	movs	r0, #120	; 0x78
 8000948:	f000 fa30 	bl	8000dac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 800094c:	22d9      	movs	r2, #217	; 0xd9
 800094e:	2180      	movs	r1, #128	; 0x80
 8000950:	2078      	movs	r0, #120	; 0x78
 8000952:	f000 fa2b 	bl	8000dac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000956:	2222      	movs	r2, #34	; 0x22
 8000958:	2180      	movs	r1, #128	; 0x80
 800095a:	2078      	movs	r0, #120	; 0x78
 800095c:	f000 fa26 	bl	8000dac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000960:	22da      	movs	r2, #218	; 0xda
 8000962:	2180      	movs	r1, #128	; 0x80
 8000964:	2078      	movs	r0, #120	; 0x78
 8000966:	f000 fa21 	bl	8000dac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800096a:	2212      	movs	r2, #18
 800096c:	2180      	movs	r1, #128	; 0x80
 800096e:	2078      	movs	r0, #120	; 0x78
 8000970:	f000 fa1c 	bl	8000dac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000974:	22db      	movs	r2, #219	; 0xdb
 8000976:	2180      	movs	r1, #128	; 0x80
 8000978:	2078      	movs	r0, #120	; 0x78
 800097a:	f000 fa17 	bl	8000dac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800097e:	2220      	movs	r2, #32
 8000980:	2180      	movs	r1, #128	; 0x80
 8000982:	2078      	movs	r0, #120	; 0x78
 8000984:	f000 fa12 	bl	8000dac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000988:	228d      	movs	r2, #141	; 0x8d
 800098a:	2180      	movs	r1, #128	; 0x80
 800098c:	2078      	movs	r0, #120	; 0x78
 800098e:	f000 fa0d 	bl	8000dac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000992:	2214      	movs	r2, #20
 8000994:	2180      	movs	r1, #128	; 0x80
 8000996:	2078      	movs	r0, #120	; 0x78
 8000998:	f000 fa08 	bl	8000dac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 800099c:	22af      	movs	r2, #175	; 0xaf
 800099e:	2180      	movs	r1, #128	; 0x80
 80009a0:	2078      	movs	r0, #120	; 0x78
 80009a2:	f000 fa03 	bl	8000dac <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80009a6:	222e      	movs	r2, #46	; 0x2e
 80009a8:	2180      	movs	r1, #128	; 0x80
 80009aa:	2078      	movs	r0, #120	; 0x78
 80009ac:	f000 f9fe 	bl	8000dac <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80009b0:	2000      	movs	r0, #0
 80009b2:	f000 f843 	bl	8000a3c <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 80009b6:	f000 f813 	bl	80009e0 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80009ba:	4b08      	ldr	r3, [pc, #32]	; (80009dc <SSD1306_Init+0x184>)
 80009bc:	2200      	movs	r2, #0
 80009be:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80009c0:	4b06      	ldr	r3, [pc, #24]	; (80009dc <SSD1306_Init+0x184>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80009c6:	4b05      	ldr	r3, [pc, #20]	; (80009dc <SSD1306_Init+0x184>)
 80009c8:	2201      	movs	r2, #1
 80009ca:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80009cc:	2301      	movs	r3, #1
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	20000038 	.word	0x20000038
 80009dc:	2000048c 	.word	0x2000048c

080009e0 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 80009e6:	2300      	movs	r3, #0
 80009e8:	71fb      	strb	r3, [r7, #7]
 80009ea:	e01d      	b.n	8000a28 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80009ec:	79fb      	ldrb	r3, [r7, #7]
 80009ee:	3b50      	subs	r3, #80	; 0x50
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	461a      	mov	r2, r3
 80009f4:	2180      	movs	r1, #128	; 0x80
 80009f6:	2078      	movs	r0, #120	; 0x78
 80009f8:	f000 f9d8 	bl	8000dac <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80009fc:	2200      	movs	r2, #0
 80009fe:	2180      	movs	r1, #128	; 0x80
 8000a00:	2078      	movs	r0, #120	; 0x78
 8000a02:	f000 f9d3 	bl	8000dac <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000a06:	2210      	movs	r2, #16
 8000a08:	2180      	movs	r1, #128	; 0x80
 8000a0a:	2078      	movs	r0, #120	; 0x78
 8000a0c:	f000 f9ce 	bl	8000dac <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000a10:	79fb      	ldrb	r3, [r7, #7]
 8000a12:	01db      	lsls	r3, r3, #7
 8000a14:	4a08      	ldr	r2, [pc, #32]	; (8000a38 <SSD1306_UpdateScreen+0x58>)
 8000a16:	441a      	add	r2, r3
 8000a18:	2380      	movs	r3, #128	; 0x80
 8000a1a:	2140      	movs	r1, #64	; 0x40
 8000a1c:	2078      	movs	r0, #120	; 0x78
 8000a1e:	f000 f95f 	bl	8000ce0 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	3301      	adds	r3, #1
 8000a26:	71fb      	strb	r3, [r7, #7]
 8000a28:	79fb      	ldrb	r3, [r7, #7]
 8000a2a:	2b07      	cmp	r3, #7
 8000a2c:	d9de      	bls.n	80009ec <SSD1306_UpdateScreen+0xc>
	}
}
 8000a2e:	bf00      	nop
 8000a30:	bf00      	nop
 8000a32:	3708      	adds	r7, #8
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	2000008c 	.word	0x2000008c

08000a3c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000a46:	79fb      	ldrb	r3, [r7, #7]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d101      	bne.n	8000a50 <SSD1306_Fill+0x14>
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	e000      	b.n	8000a52 <SSD1306_Fill+0x16>
 8000a50:	23ff      	movs	r3, #255	; 0xff
 8000a52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a56:	4619      	mov	r1, r3
 8000a58:	4803      	ldr	r0, [pc, #12]	; (8000a68 <SSD1306_Fill+0x2c>)
 8000a5a:	f001 ffb5 	bl	80029c8 <memset>
}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	2000008c 	.word	0x2000008c

08000a6c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	80fb      	strh	r3, [r7, #6]
 8000a76:	460b      	mov	r3, r1
 8000a78:	80bb      	strh	r3, [r7, #4]
 8000a7a:	4613      	mov	r3, r2
 8000a7c:	70fb      	strb	r3, [r7, #3]
	if (
 8000a7e:	88fb      	ldrh	r3, [r7, #6]
 8000a80:	2b7f      	cmp	r3, #127	; 0x7f
 8000a82:	d848      	bhi.n	8000b16 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000a84:	88bb      	ldrh	r3, [r7, #4]
 8000a86:	2b3f      	cmp	r3, #63	; 0x3f
 8000a88:	d845      	bhi.n	8000b16 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000a8a:	4b26      	ldr	r3, [pc, #152]	; (8000b24 <SSD1306_DrawPixel+0xb8>)
 8000a8c:	791b      	ldrb	r3, [r3, #4]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d006      	beq.n	8000aa0 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000a92:	78fb      	ldrb	r3, [r7, #3]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	bf0c      	ite	eq
 8000a98:	2301      	moveq	r3, #1
 8000a9a:	2300      	movne	r3, #0
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000aa0:	78fb      	ldrb	r3, [r7, #3]
 8000aa2:	2b01      	cmp	r3, #1
 8000aa4:	d11a      	bne.n	8000adc <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000aa6:	88fa      	ldrh	r2, [r7, #6]
 8000aa8:	88bb      	ldrh	r3, [r7, #4]
 8000aaa:	08db      	lsrs	r3, r3, #3
 8000aac:	b298      	uxth	r0, r3
 8000aae:	4603      	mov	r3, r0
 8000ab0:	01db      	lsls	r3, r3, #7
 8000ab2:	4413      	add	r3, r2
 8000ab4:	4a1c      	ldr	r2, [pc, #112]	; (8000b28 <SSD1306_DrawPixel+0xbc>)
 8000ab6:	5cd3      	ldrb	r3, [r2, r3]
 8000ab8:	b25a      	sxtb	r2, r3
 8000aba:	88bb      	ldrh	r3, [r7, #4]
 8000abc:	f003 0307 	and.w	r3, r3, #7
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac6:	b25b      	sxtb	r3, r3
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	b259      	sxtb	r1, r3
 8000acc:	88fa      	ldrh	r2, [r7, #6]
 8000ace:	4603      	mov	r3, r0
 8000ad0:	01db      	lsls	r3, r3, #7
 8000ad2:	4413      	add	r3, r2
 8000ad4:	b2c9      	uxtb	r1, r1
 8000ad6:	4a14      	ldr	r2, [pc, #80]	; (8000b28 <SSD1306_DrawPixel+0xbc>)
 8000ad8:	54d1      	strb	r1, [r2, r3]
 8000ada:	e01d      	b.n	8000b18 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000adc:	88fa      	ldrh	r2, [r7, #6]
 8000ade:	88bb      	ldrh	r3, [r7, #4]
 8000ae0:	08db      	lsrs	r3, r3, #3
 8000ae2:	b298      	uxth	r0, r3
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	01db      	lsls	r3, r3, #7
 8000ae8:	4413      	add	r3, r2
 8000aea:	4a0f      	ldr	r2, [pc, #60]	; (8000b28 <SSD1306_DrawPixel+0xbc>)
 8000aec:	5cd3      	ldrb	r3, [r2, r3]
 8000aee:	b25a      	sxtb	r2, r3
 8000af0:	88bb      	ldrh	r3, [r7, #4]
 8000af2:	f003 0307 	and.w	r3, r3, #7
 8000af6:	2101      	movs	r1, #1
 8000af8:	fa01 f303 	lsl.w	r3, r1, r3
 8000afc:	b25b      	sxtb	r3, r3
 8000afe:	43db      	mvns	r3, r3
 8000b00:	b25b      	sxtb	r3, r3
 8000b02:	4013      	ands	r3, r2
 8000b04:	b259      	sxtb	r1, r3
 8000b06:	88fa      	ldrh	r2, [r7, #6]
 8000b08:	4603      	mov	r3, r0
 8000b0a:	01db      	lsls	r3, r3, #7
 8000b0c:	4413      	add	r3, r2
 8000b0e:	b2c9      	uxtb	r1, r1
 8000b10:	4a05      	ldr	r2, [pc, #20]	; (8000b28 <SSD1306_DrawPixel+0xbc>)
 8000b12:	54d1      	strb	r1, [r2, r3]
 8000b14:	e000      	b.n	8000b18 <SSD1306_DrawPixel+0xac>
		return;
 8000b16:	bf00      	nop
	}
}
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	2000048c 	.word	0x2000048c
 8000b28:	2000008c 	.word	0x2000008c

08000b2c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	460a      	mov	r2, r1
 8000b36:	80fb      	strh	r3, [r7, #6]
 8000b38:	4613      	mov	r3, r2
 8000b3a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000b3c:	4a05      	ldr	r2, [pc, #20]	; (8000b54 <SSD1306_GotoXY+0x28>)
 8000b3e:	88fb      	ldrh	r3, [r7, #6]
 8000b40:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000b42:	4a04      	ldr	r2, [pc, #16]	; (8000b54 <SSD1306_GotoXY+0x28>)
 8000b44:	88bb      	ldrh	r3, [r7, #4]
 8000b46:	8053      	strh	r3, [r2, #2]
}
 8000b48:	bf00      	nop
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	2000048c 	.word	0x2000048c

08000b58 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	6039      	str	r1, [r7, #0]
 8000b62:	71fb      	strb	r3, [r7, #7]
 8000b64:	4613      	mov	r3, r2
 8000b66:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000b68:	4b3a      	ldr	r3, [pc, #232]	; (8000c54 <SSD1306_Putc+0xfc>)
 8000b6a:	881b      	ldrh	r3, [r3, #0]
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	4413      	add	r3, r2
	if (
 8000b74:	2b7f      	cmp	r3, #127	; 0x7f
 8000b76:	dc07      	bgt.n	8000b88 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000b78:	4b36      	ldr	r3, [pc, #216]	; (8000c54 <SSD1306_Putc+0xfc>)
 8000b7a:	885b      	ldrh	r3, [r3, #2]
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	785b      	ldrb	r3, [r3, #1]
 8000b82:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000b84:	2b3f      	cmp	r3, #63	; 0x3f
 8000b86:	dd01      	ble.n	8000b8c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	e05e      	b.n	8000c4a <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	617b      	str	r3, [r7, #20]
 8000b90:	e04b      	b.n	8000c2a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	685a      	ldr	r2, [r3, #4]
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	3b20      	subs	r3, #32
 8000b9a:	6839      	ldr	r1, [r7, #0]
 8000b9c:	7849      	ldrb	r1, [r1, #1]
 8000b9e:	fb01 f303 	mul.w	r3, r1, r3
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	440b      	add	r3, r1
 8000ba8:	005b      	lsls	r3, r3, #1
 8000baa:	4413      	add	r3, r2
 8000bac:	881b      	ldrh	r3, [r3, #0]
 8000bae:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	613b      	str	r3, [r7, #16]
 8000bb4:	e030      	b.n	8000c18 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000bb6:	68fa      	ldr	r2, [r7, #12]
 8000bb8:	693b      	ldr	r3, [r7, #16]
 8000bba:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d010      	beq.n	8000be8 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000bc6:	4b23      	ldr	r3, [pc, #140]	; (8000c54 <SSD1306_Putc+0xfc>)
 8000bc8:	881a      	ldrh	r2, [r3, #0]
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	b29b      	uxth	r3, r3
 8000bce:	4413      	add	r3, r2
 8000bd0:	b298      	uxth	r0, r3
 8000bd2:	4b20      	ldr	r3, [pc, #128]	; (8000c54 <SSD1306_Putc+0xfc>)
 8000bd4:	885a      	ldrh	r2, [r3, #2]
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	b29b      	uxth	r3, r3
 8000bda:	4413      	add	r3, r2
 8000bdc:	b29b      	uxth	r3, r3
 8000bde:	79ba      	ldrb	r2, [r7, #6]
 8000be0:	4619      	mov	r1, r3
 8000be2:	f7ff ff43 	bl	8000a6c <SSD1306_DrawPixel>
 8000be6:	e014      	b.n	8000c12 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000be8:	4b1a      	ldr	r3, [pc, #104]	; (8000c54 <SSD1306_Putc+0xfc>)
 8000bea:	881a      	ldrh	r2, [r3, #0]
 8000bec:	693b      	ldr	r3, [r7, #16]
 8000bee:	b29b      	uxth	r3, r3
 8000bf0:	4413      	add	r3, r2
 8000bf2:	b298      	uxth	r0, r3
 8000bf4:	4b17      	ldr	r3, [pc, #92]	; (8000c54 <SSD1306_Putc+0xfc>)
 8000bf6:	885a      	ldrh	r2, [r3, #2]
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	b29b      	uxth	r3, r3
 8000bfc:	4413      	add	r3, r2
 8000bfe:	b299      	uxth	r1, r3
 8000c00:	79bb      	ldrb	r3, [r7, #6]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	bf0c      	ite	eq
 8000c06:	2301      	moveq	r3, #1
 8000c08:	2300      	movne	r3, #0
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	f7ff ff2d 	bl	8000a6c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000c12:	693b      	ldr	r3, [r7, #16]
 8000c14:	3301      	adds	r3, #1
 8000c16:	613b      	str	r3, [r7, #16]
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	693b      	ldr	r3, [r7, #16]
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d3c8      	bcc.n	8000bb6 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	3301      	adds	r3, #1
 8000c28:	617b      	str	r3, [r7, #20]
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	785b      	ldrb	r3, [r3, #1]
 8000c2e:	461a      	mov	r2, r3
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d3ad      	bcc.n	8000b92 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000c36:	4b07      	ldr	r3, [pc, #28]	; (8000c54 <SSD1306_Putc+0xfc>)
 8000c38:	881a      	ldrh	r2, [r3, #0]
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	b29b      	uxth	r3, r3
 8000c40:	4413      	add	r3, r2
 8000c42:	b29a      	uxth	r2, r3
 8000c44:	4b03      	ldr	r3, [pc, #12]	; (8000c54 <SSD1306_Putc+0xfc>)
 8000c46:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8000c48:	79fb      	ldrb	r3, [r7, #7]
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3718      	adds	r7, #24
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	2000048c 	.word	0x2000048c

08000c58 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	4613      	mov	r3, r2
 8000c64:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000c66:	e012      	b.n	8000c8e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	79fa      	ldrb	r2, [r7, #7]
 8000c6e:	68b9      	ldr	r1, [r7, #8]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff ff71 	bl	8000b58 <SSD1306_Putc>
 8000c76:	4603      	mov	r3, r0
 8000c78:	461a      	mov	r2, r3
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	429a      	cmp	r2, r3
 8000c80:	d002      	beq.n	8000c88 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	e008      	b.n	8000c9a <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d1e8      	bne.n	8000c68 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	781b      	ldrb	r3, [r3, #0]
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3710      	adds	r7, #16
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	f7ff fec8 	bl	8000a3c <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8000cac:	f7ff fe98 	bl	80009e0 <SSD1306_UpdateScreen>
}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000cba:	4b08      	ldr	r3, [pc, #32]	; (8000cdc <ssd1306_I2C_Init+0x28>)
 8000cbc:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000cbe:	e002      	b.n	8000cc6 <ssd1306_I2C_Init+0x12>
		p--;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d1f9      	bne.n	8000cc0 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000ccc:	bf00      	nop
 8000cce:	bf00      	nop
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	0003d090 	.word	0x0003d090

08000ce0 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000ce0:	b590      	push	{r4, r7, lr}
 8000ce2:	b0c7      	sub	sp, #284	; 0x11c
 8000ce4:	af02      	add	r7, sp, #8
 8000ce6:	4604      	mov	r4, r0
 8000ce8:	4608      	mov	r0, r1
 8000cea:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000cee:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8000cf2:	600a      	str	r2, [r1, #0]
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000cfa:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000cfe:	4622      	mov	r2, r4
 8000d00:	701a      	strb	r2, [r3, #0]
 8000d02:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d06:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000d0a:	4602      	mov	r2, r0
 8000d0c:	701a      	strb	r2, [r3, #0]
 8000d0e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d12:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000d16:	460a      	mov	r2, r1
 8000d18:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000d1a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000d22:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000d26:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8000d2a:	7812      	ldrb	r2, [r2, #0]
 8000d2c:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000d2e:	2300      	movs	r3, #0
 8000d30:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000d34:	e015      	b.n	8000d62 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8000d36:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000d3a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000d3e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000d42:	6812      	ldr	r2, [r2, #0]
 8000d44:	441a      	add	r2, r3
 8000d46:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	7811      	ldrb	r1, [r2, #0]
 8000d4e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000d52:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8000d56:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000d58:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000d62:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000d66:	b29b      	uxth	r3, r3
 8000d68:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000d6c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000d70:	8812      	ldrh	r2, [r2, #0]
 8000d72:	429a      	cmp	r2, r3
 8000d74:	d8df      	bhi.n	8000d36 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 100);
 8000d76:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d7a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	b299      	uxth	r1, r3
 8000d82:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d86:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000d8a:	881b      	ldrh	r3, [r3, #0]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	f107 020c 	add.w	r2, r7, #12
 8000d94:	2064      	movs	r0, #100	; 0x64
 8000d96:	9000      	str	r0, [sp, #0]
 8000d98:	4803      	ldr	r0, [pc, #12]	; (8000da8 <ssd1306_I2C_WriteMulti+0xc8>)
 8000d9a:	f000 fd3f 	bl	800181c <HAL_I2C_Master_Transmit>
}
 8000d9e:	bf00      	nop
 8000da0:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd90      	pop	{r4, r7, pc}
 8000da8:	20000038 	.word	0x20000038

08000dac <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af02      	add	r7, sp, #8
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
 8000db6:	460b      	mov	r3, r1
 8000db8:	71bb      	strb	r3, [r7, #6]
 8000dba:	4613      	mov	r3, r2
 8000dbc:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000dbe:	79bb      	ldrb	r3, [r7, #6]
 8000dc0:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000dc2:	797b      	ldrb	r3, [r7, #5]
 8000dc4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000dc6:	79fb      	ldrb	r3, [r7, #7]
 8000dc8:	b299      	uxth	r1, r3
 8000dca:	f107 020c 	add.w	r2, r7, #12
 8000dce:	230a      	movs	r3, #10
 8000dd0:	9300      	str	r3, [sp, #0]
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	4803      	ldr	r0, [pc, #12]	; (8000de4 <ssd1306_I2C_Write+0x38>)
 8000dd6:	f000 fd21 	bl	800181c <HAL_I2C_Master_Transmit>
}
 8000dda:	bf00      	nop
 8000ddc:	3710      	adds	r7, #16
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20000038 	.word	0x20000038

08000de8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	607b      	str	r3, [r7, #4]
 8000df2:	4b10      	ldr	r3, [pc, #64]	; (8000e34 <HAL_MspInit+0x4c>)
 8000df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df6:	4a0f      	ldr	r2, [pc, #60]	; (8000e34 <HAL_MspInit+0x4c>)
 8000df8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dfc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dfe:	4b0d      	ldr	r3, [pc, #52]	; (8000e34 <HAL_MspInit+0x4c>)
 8000e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e06:	607b      	str	r3, [r7, #4]
 8000e08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	603b      	str	r3, [r7, #0]
 8000e0e:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <HAL_MspInit+0x4c>)
 8000e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e12:	4a08      	ldr	r2, [pc, #32]	; (8000e34 <HAL_MspInit+0x4c>)
 8000e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e18:	6413      	str	r3, [r2, #64]	; 0x40
 8000e1a:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <HAL_MspInit+0x4c>)
 8000e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e22:	603b      	str	r3, [r7, #0]
 8000e24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e26:	bf00      	nop
 8000e28:	370c      	adds	r7, #12
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	40023800 	.word	0x40023800

08000e38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08a      	sub	sp, #40	; 0x28
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a19      	ldr	r2, [pc, #100]	; (8000ebc <HAL_I2C_MspInit+0x84>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d12c      	bne.n	8000eb4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	613b      	str	r3, [r7, #16]
 8000e5e:	4b18      	ldr	r3, [pc, #96]	; (8000ec0 <HAL_I2C_MspInit+0x88>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	4a17      	ldr	r2, [pc, #92]	; (8000ec0 <HAL_I2C_MspInit+0x88>)
 8000e64:	f043 0302 	orr.w	r3, r3, #2
 8000e68:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6a:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <HAL_I2C_MspInit+0x88>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	f003 0302 	and.w	r3, r3, #2
 8000e72:	613b      	str	r3, [r7, #16]
 8000e74:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e76:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e7c:	2312      	movs	r3, #18
 8000e7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e80:	2301      	movs	r3, #1
 8000e82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e84:	2303      	movs	r3, #3
 8000e86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e88:	2304      	movs	r3, #4
 8000e8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	4619      	mov	r1, r3
 8000e92:	480c      	ldr	r0, [pc, #48]	; (8000ec4 <HAL_I2C_MspInit+0x8c>)
 8000e94:	f000 f9fa 	bl	800128c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e98:	2300      	movs	r3, #0
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <HAL_I2C_MspInit+0x88>)
 8000e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea0:	4a07      	ldr	r2, [pc, #28]	; (8000ec0 <HAL_I2C_MspInit+0x88>)
 8000ea2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ea6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ea8:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <HAL_I2C_MspInit+0x88>)
 8000eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eb0:	60fb      	str	r3, [r7, #12]
 8000eb2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000eb4:	bf00      	nop
 8000eb6:	3728      	adds	r7, #40	; 0x28
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40005400 	.word	0x40005400
 8000ec0:	40023800 	.word	0x40023800
 8000ec4:	40020400 	.word	0x40020400

08000ec8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ecc:	e7fe      	b.n	8000ecc <NMI_Handler+0x4>

08000ece <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed2:	e7fe      	b.n	8000ed2 <HardFault_Handler+0x4>

08000ed4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed8:	e7fe      	b.n	8000ed8 <MemManage_Handler+0x4>

08000eda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ede:	e7fe      	b.n	8000ede <BusFault_Handler+0x4>

08000ee0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <UsageFault_Handler+0x4>

08000ee6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f14:	f000 f890 	bl	8001038 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f18:	bf00      	nop
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f20:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <SystemInit+0x20>)
 8000f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f26:	4a05      	ldr	r2, [pc, #20]	; (8000f3c <SystemInit+0x20>)
 8000f28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f78 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f44:	480d      	ldr	r0, [pc, #52]	; (8000f7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f46:	490e      	ldr	r1, [pc, #56]	; (8000f80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f48:	4a0e      	ldr	r2, [pc, #56]	; (8000f84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f4c:	e002      	b.n	8000f54 <LoopCopyDataInit>

08000f4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f52:	3304      	adds	r3, #4

08000f54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f58:	d3f9      	bcc.n	8000f4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f5a:	4a0b      	ldr	r2, [pc, #44]	; (8000f88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f5c:	4c0b      	ldr	r4, [pc, #44]	; (8000f8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f60:	e001      	b.n	8000f66 <LoopFillZerobss>

08000f62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f64:	3204      	adds	r2, #4

08000f66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f68:	d3fb      	bcc.n	8000f62 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f6a:	f7ff ffd7 	bl	8000f1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f6e:	f001 fd33 	bl	80029d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f72:	f7ff faad 	bl	80004d0 <main>
  bx  lr    
 8000f76:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f78:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f80:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000f84:	08004b5c 	.word	0x08004b5c
  ldr r2, =_sbss
 8000f88:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000f8c:	20000498 	.word	0x20000498

08000f90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f90:	e7fe      	b.n	8000f90 <ADC_IRQHandler>
	...

08000f94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f98:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <HAL_Init+0x40>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a0d      	ldr	r2, [pc, #52]	; (8000fd4 <HAL_Init+0x40>)
 8000f9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fa2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fa4:	4b0b      	ldr	r3, [pc, #44]	; (8000fd4 <HAL_Init+0x40>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a0a      	ldr	r2, [pc, #40]	; (8000fd4 <HAL_Init+0x40>)
 8000faa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fb0:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <HAL_Init+0x40>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a07      	ldr	r2, [pc, #28]	; (8000fd4 <HAL_Init+0x40>)
 8000fb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fbc:	2003      	movs	r0, #3
 8000fbe:	f000 f931 	bl	8001224 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fc2:	200f      	movs	r0, #15
 8000fc4:	f000 f808 	bl	8000fd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fc8:	f7ff ff0e 	bl	8000de8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fcc:	2300      	movs	r3, #0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40023c00 	.word	0x40023c00

08000fd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fe0:	4b12      	ldr	r3, [pc, #72]	; (800102c <HAL_InitTick+0x54>)
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	4b12      	ldr	r3, [pc, #72]	; (8001030 <HAL_InitTick+0x58>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	4619      	mov	r1, r3
 8000fea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f000 f93b 	bl	8001272 <HAL_SYSTICK_Config>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	e00e      	b.n	8001024 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2b0f      	cmp	r3, #15
 800100a:	d80a      	bhi.n	8001022 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800100c:	2200      	movs	r2, #0
 800100e:	6879      	ldr	r1, [r7, #4]
 8001010:	f04f 30ff 	mov.w	r0, #4294967295
 8001014:	f000 f911 	bl	800123a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001018:	4a06      	ldr	r2, [pc, #24]	; (8001034 <HAL_InitTick+0x5c>)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800101e:	2300      	movs	r3, #0
 8001020:	e000      	b.n	8001024 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
}
 8001024:	4618      	mov	r0, r3
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20000010 	.word	0x20000010
 8001030:	20000018 	.word	0x20000018
 8001034:	20000014 	.word	0x20000014

08001038 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800103c:	4b06      	ldr	r3, [pc, #24]	; (8001058 <HAL_IncTick+0x20>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	461a      	mov	r2, r3
 8001042:	4b06      	ldr	r3, [pc, #24]	; (800105c <HAL_IncTick+0x24>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4413      	add	r3, r2
 8001048:	4a04      	ldr	r2, [pc, #16]	; (800105c <HAL_IncTick+0x24>)
 800104a:	6013      	str	r3, [r2, #0]
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	20000018 	.word	0x20000018
 800105c:	20000494 	.word	0x20000494

08001060 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  return uwTick;
 8001064:	4b03      	ldr	r3, [pc, #12]	; (8001074 <HAL_GetTick+0x14>)
 8001066:	681b      	ldr	r3, [r3, #0]
}
 8001068:	4618      	mov	r0, r3
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	20000494 	.word	0x20000494

08001078 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001080:	f7ff ffee 	bl	8001060 <HAL_GetTick>
 8001084:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001090:	d005      	beq.n	800109e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001092:	4b0a      	ldr	r3, [pc, #40]	; (80010bc <HAL_Delay+0x44>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	461a      	mov	r2, r3
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	4413      	add	r3, r2
 800109c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800109e:	bf00      	nop
 80010a0:	f7ff ffde 	bl	8001060 <HAL_GetTick>
 80010a4:	4602      	mov	r2, r0
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	68fa      	ldr	r2, [r7, #12]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d8f7      	bhi.n	80010a0 <HAL_Delay+0x28>
  {
  }
}
 80010b0:	bf00      	nop
 80010b2:	bf00      	nop
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000018 	.word	0x20000018

080010c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d0:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <__NVIC_SetPriorityGrouping+0x44>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010d6:	68ba      	ldr	r2, [r7, #8]
 80010d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010dc:	4013      	ands	r3, r2
 80010de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010f2:	4a04      	ldr	r2, [pc, #16]	; (8001104 <__NVIC_SetPriorityGrouping+0x44>)
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	60d3      	str	r3, [r2, #12]
}
 80010f8:	bf00      	nop
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800110c:	4b04      	ldr	r3, [pc, #16]	; (8001120 <__NVIC_GetPriorityGrouping+0x18>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	0a1b      	lsrs	r3, r3, #8
 8001112:	f003 0307 	and.w	r3, r3, #7
}
 8001116:	4618      	mov	r0, r3
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	6039      	str	r1, [r7, #0]
 800112e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001134:	2b00      	cmp	r3, #0
 8001136:	db0a      	blt.n	800114e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	b2da      	uxtb	r2, r3
 800113c:	490c      	ldr	r1, [pc, #48]	; (8001170 <__NVIC_SetPriority+0x4c>)
 800113e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001142:	0112      	lsls	r2, r2, #4
 8001144:	b2d2      	uxtb	r2, r2
 8001146:	440b      	add	r3, r1
 8001148:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800114c:	e00a      	b.n	8001164 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	b2da      	uxtb	r2, r3
 8001152:	4908      	ldr	r1, [pc, #32]	; (8001174 <__NVIC_SetPriority+0x50>)
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	f003 030f 	and.w	r3, r3, #15
 800115a:	3b04      	subs	r3, #4
 800115c:	0112      	lsls	r2, r2, #4
 800115e:	b2d2      	uxtb	r2, r2
 8001160:	440b      	add	r3, r1
 8001162:	761a      	strb	r2, [r3, #24]
}
 8001164:	bf00      	nop
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	e000e100 	.word	0xe000e100
 8001174:	e000ed00 	.word	0xe000ed00

08001178 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001178:	b480      	push	{r7}
 800117a:	b089      	sub	sp, #36	; 0x24
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	f003 0307 	and.w	r3, r3, #7
 800118a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	f1c3 0307 	rsb	r3, r3, #7
 8001192:	2b04      	cmp	r3, #4
 8001194:	bf28      	it	cs
 8001196:	2304      	movcs	r3, #4
 8001198:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	3304      	adds	r3, #4
 800119e:	2b06      	cmp	r3, #6
 80011a0:	d902      	bls.n	80011a8 <NVIC_EncodePriority+0x30>
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	3b03      	subs	r3, #3
 80011a6:	e000      	b.n	80011aa <NVIC_EncodePriority+0x32>
 80011a8:	2300      	movs	r3, #0
 80011aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011ac:	f04f 32ff 	mov.w	r2, #4294967295
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	43da      	mvns	r2, r3
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	401a      	ands	r2, r3
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011c0:	f04f 31ff 	mov.w	r1, #4294967295
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ca:	43d9      	mvns	r1, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d0:	4313      	orrs	r3, r2
         );
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3724      	adds	r7, #36	; 0x24
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
	...

080011e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	3b01      	subs	r3, #1
 80011ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011f0:	d301      	bcc.n	80011f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011f2:	2301      	movs	r3, #1
 80011f4:	e00f      	b.n	8001216 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011f6:	4a0a      	ldr	r2, [pc, #40]	; (8001220 <SysTick_Config+0x40>)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011fe:	210f      	movs	r1, #15
 8001200:	f04f 30ff 	mov.w	r0, #4294967295
 8001204:	f7ff ff8e 	bl	8001124 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001208:	4b05      	ldr	r3, [pc, #20]	; (8001220 <SysTick_Config+0x40>)
 800120a:	2200      	movs	r2, #0
 800120c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800120e:	4b04      	ldr	r3, [pc, #16]	; (8001220 <SysTick_Config+0x40>)
 8001210:	2207      	movs	r2, #7
 8001212:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001214:	2300      	movs	r3, #0
}
 8001216:	4618      	mov	r0, r3
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	e000e010 	.word	0xe000e010

08001224 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f7ff ff47 	bl	80010c0 <__NVIC_SetPriorityGrouping>
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800123a:	b580      	push	{r7, lr}
 800123c:	b086      	sub	sp, #24
 800123e:	af00      	add	r7, sp, #0
 8001240:	4603      	mov	r3, r0
 8001242:	60b9      	str	r1, [r7, #8]
 8001244:	607a      	str	r2, [r7, #4]
 8001246:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800124c:	f7ff ff5c 	bl	8001108 <__NVIC_GetPriorityGrouping>
 8001250:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	68b9      	ldr	r1, [r7, #8]
 8001256:	6978      	ldr	r0, [r7, #20]
 8001258:	f7ff ff8e 	bl	8001178 <NVIC_EncodePriority>
 800125c:	4602      	mov	r2, r0
 800125e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001262:	4611      	mov	r1, r2
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff ff5d 	bl	8001124 <__NVIC_SetPriority>
}
 800126a:	bf00      	nop
 800126c:	3718      	adds	r7, #24
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b082      	sub	sp, #8
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff ffb0 	bl	80011e0 <SysTick_Config>
 8001280:	4603      	mov	r3, r0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
	...

0800128c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800128c:	b480      	push	{r7}
 800128e:	b089      	sub	sp, #36	; 0x24
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001296:	2300      	movs	r3, #0
 8001298:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800129a:	2300      	movs	r3, #0
 800129c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800129e:	2300      	movs	r3, #0
 80012a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012a2:	2300      	movs	r3, #0
 80012a4:	61fb      	str	r3, [r7, #28]
 80012a6:	e159      	b.n	800155c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012a8:	2201      	movs	r2, #1
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	697a      	ldr	r2, [r7, #20]
 80012b8:	4013      	ands	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	f040 8148 	bne.w	8001556 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f003 0303 	and.w	r3, r3, #3
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d005      	beq.n	80012de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d130      	bne.n	8001340 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	2203      	movs	r2, #3
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	43db      	mvns	r3, r3
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	4013      	ands	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	68da      	ldr	r2, [r3, #12]
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4313      	orrs	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001314:	2201      	movs	r2, #1
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	43db      	mvns	r3, r3
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4013      	ands	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	091b      	lsrs	r3, r3, #4
 800132a:	f003 0201 	and.w	r2, r3, #1
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	4313      	orrs	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f003 0303 	and.w	r3, r3, #3
 8001348:	2b03      	cmp	r3, #3
 800134a:	d017      	beq.n	800137c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	2203      	movs	r2, #3
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	43db      	mvns	r3, r3
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	4013      	ands	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	689a      	ldr	r2, [r3, #8]
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4313      	orrs	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f003 0303 	and.w	r3, r3, #3
 8001384:	2b02      	cmp	r3, #2
 8001386:	d123      	bne.n	80013d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	08da      	lsrs	r2, r3, #3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	3208      	adds	r2, #8
 8001390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001394:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	f003 0307 	and.w	r3, r3, #7
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	220f      	movs	r2, #15
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	43db      	mvns	r3, r3
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	4013      	ands	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	691a      	ldr	r2, [r3, #16]
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	f003 0307 	and.w	r3, r3, #7
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	4313      	orrs	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	08da      	lsrs	r2, r3, #3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	3208      	adds	r2, #8
 80013ca:	69b9      	ldr	r1, [r7, #24]
 80013cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	2203      	movs	r2, #3
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	43db      	mvns	r3, r3
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	4013      	ands	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f003 0203 	and.w	r2, r3, #3
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800140c:	2b00      	cmp	r3, #0
 800140e:	f000 80a2 	beq.w	8001556 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	60fb      	str	r3, [r7, #12]
 8001416:	4b57      	ldr	r3, [pc, #348]	; (8001574 <HAL_GPIO_Init+0x2e8>)
 8001418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141a:	4a56      	ldr	r2, [pc, #344]	; (8001574 <HAL_GPIO_Init+0x2e8>)
 800141c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001420:	6453      	str	r3, [r2, #68]	; 0x44
 8001422:	4b54      	ldr	r3, [pc, #336]	; (8001574 <HAL_GPIO_Init+0x2e8>)
 8001424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001426:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800142e:	4a52      	ldr	r2, [pc, #328]	; (8001578 <HAL_GPIO_Init+0x2ec>)
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	089b      	lsrs	r3, r3, #2
 8001434:	3302      	adds	r3, #2
 8001436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800143a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	f003 0303 	and.w	r3, r3, #3
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	220f      	movs	r2, #15
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	43db      	mvns	r3, r3
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	4013      	ands	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a49      	ldr	r2, [pc, #292]	; (800157c <HAL_GPIO_Init+0x2f0>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d019      	beq.n	800148e <HAL_GPIO_Init+0x202>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a48      	ldr	r2, [pc, #288]	; (8001580 <HAL_GPIO_Init+0x2f4>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d013      	beq.n	800148a <HAL_GPIO_Init+0x1fe>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a47      	ldr	r2, [pc, #284]	; (8001584 <HAL_GPIO_Init+0x2f8>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d00d      	beq.n	8001486 <HAL_GPIO_Init+0x1fa>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a46      	ldr	r2, [pc, #280]	; (8001588 <HAL_GPIO_Init+0x2fc>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d007      	beq.n	8001482 <HAL_GPIO_Init+0x1f6>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a45      	ldr	r2, [pc, #276]	; (800158c <HAL_GPIO_Init+0x300>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d101      	bne.n	800147e <HAL_GPIO_Init+0x1f2>
 800147a:	2304      	movs	r3, #4
 800147c:	e008      	b.n	8001490 <HAL_GPIO_Init+0x204>
 800147e:	2307      	movs	r3, #7
 8001480:	e006      	b.n	8001490 <HAL_GPIO_Init+0x204>
 8001482:	2303      	movs	r3, #3
 8001484:	e004      	b.n	8001490 <HAL_GPIO_Init+0x204>
 8001486:	2302      	movs	r3, #2
 8001488:	e002      	b.n	8001490 <HAL_GPIO_Init+0x204>
 800148a:	2301      	movs	r3, #1
 800148c:	e000      	b.n	8001490 <HAL_GPIO_Init+0x204>
 800148e:	2300      	movs	r3, #0
 8001490:	69fa      	ldr	r2, [r7, #28]
 8001492:	f002 0203 	and.w	r2, r2, #3
 8001496:	0092      	lsls	r2, r2, #2
 8001498:	4093      	lsls	r3, r2
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	4313      	orrs	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014a0:	4935      	ldr	r1, [pc, #212]	; (8001578 <HAL_GPIO_Init+0x2ec>)
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	089b      	lsrs	r3, r3, #2
 80014a6:	3302      	adds	r3, #2
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014ae:	4b38      	ldr	r3, [pc, #224]	; (8001590 <HAL_GPIO_Init+0x304>)
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	43db      	mvns	r3, r3
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	4013      	ands	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d003      	beq.n	80014d2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80014ca:	69ba      	ldr	r2, [r7, #24]
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014d2:	4a2f      	ldr	r2, [pc, #188]	; (8001590 <HAL_GPIO_Init+0x304>)
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014d8:	4b2d      	ldr	r3, [pc, #180]	; (8001590 <HAL_GPIO_Init+0x304>)
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	43db      	mvns	r3, r3
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	4013      	ands	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d003      	beq.n	80014fc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014fc:	4a24      	ldr	r2, [pc, #144]	; (8001590 <HAL_GPIO_Init+0x304>)
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001502:	4b23      	ldr	r3, [pc, #140]	; (8001590 <HAL_GPIO_Init+0x304>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	43db      	mvns	r3, r3
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	4013      	ands	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d003      	beq.n	8001526 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	4313      	orrs	r3, r2
 8001524:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001526:	4a1a      	ldr	r2, [pc, #104]	; (8001590 <HAL_GPIO_Init+0x304>)
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800152c:	4b18      	ldr	r3, [pc, #96]	; (8001590 <HAL_GPIO_Init+0x304>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	43db      	mvns	r3, r3
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	4013      	ands	r3, r2
 800153a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d003      	beq.n	8001550 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	4313      	orrs	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001550:	4a0f      	ldr	r2, [pc, #60]	; (8001590 <HAL_GPIO_Init+0x304>)
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	3301      	adds	r3, #1
 800155a:	61fb      	str	r3, [r7, #28]
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	2b0f      	cmp	r3, #15
 8001560:	f67f aea2 	bls.w	80012a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001564:	bf00      	nop
 8001566:	bf00      	nop
 8001568:	3724      	adds	r7, #36	; 0x24
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	40023800 	.word	0x40023800
 8001578:	40013800 	.word	0x40013800
 800157c:	40020000 	.word	0x40020000
 8001580:	40020400 	.word	0x40020400
 8001584:	40020800 	.word	0x40020800
 8001588:	40020c00 	.word	0x40020c00
 800158c:	40021000 	.word	0x40021000
 8001590:	40013c00 	.word	0x40013c00

08001594 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d101      	bne.n	80015a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e12b      	b.n	80017fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d106      	bne.n	80015c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f7ff fc3c 	bl	8000e38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2224      	movs	r2, #36	; 0x24
 80015c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f022 0201 	bic.w	r2, r2, #1
 80015d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80015f8:	f001 f976 	bl	80028e8 <HAL_RCC_GetPCLK1Freq>
 80015fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	4a81      	ldr	r2, [pc, #516]	; (8001808 <HAL_I2C_Init+0x274>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d807      	bhi.n	8001618 <HAL_I2C_Init+0x84>
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	4a80      	ldr	r2, [pc, #512]	; (800180c <HAL_I2C_Init+0x278>)
 800160c:	4293      	cmp	r3, r2
 800160e:	bf94      	ite	ls
 8001610:	2301      	movls	r3, #1
 8001612:	2300      	movhi	r3, #0
 8001614:	b2db      	uxtb	r3, r3
 8001616:	e006      	b.n	8001626 <HAL_I2C_Init+0x92>
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	4a7d      	ldr	r2, [pc, #500]	; (8001810 <HAL_I2C_Init+0x27c>)
 800161c:	4293      	cmp	r3, r2
 800161e:	bf94      	ite	ls
 8001620:	2301      	movls	r3, #1
 8001622:	2300      	movhi	r3, #0
 8001624:	b2db      	uxtb	r3, r3
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e0e7      	b.n	80017fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	4a78      	ldr	r2, [pc, #480]	; (8001814 <HAL_I2C_Init+0x280>)
 8001632:	fba2 2303 	umull	r2, r3, r2, r3
 8001636:	0c9b      	lsrs	r3, r3, #18
 8001638:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	68ba      	ldr	r2, [r7, #8]
 800164a:	430a      	orrs	r2, r1
 800164c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	6a1b      	ldr	r3, [r3, #32]
 8001654:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	4a6a      	ldr	r2, [pc, #424]	; (8001808 <HAL_I2C_Init+0x274>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d802      	bhi.n	8001668 <HAL_I2C_Init+0xd4>
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	3301      	adds	r3, #1
 8001666:	e009      	b.n	800167c <HAL_I2C_Init+0xe8>
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800166e:	fb02 f303 	mul.w	r3, r2, r3
 8001672:	4a69      	ldr	r2, [pc, #420]	; (8001818 <HAL_I2C_Init+0x284>)
 8001674:	fba2 2303 	umull	r2, r3, r2, r3
 8001678:	099b      	lsrs	r3, r3, #6
 800167a:	3301      	adds	r3, #1
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	6812      	ldr	r2, [r2, #0]
 8001680:	430b      	orrs	r3, r1
 8001682:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	69db      	ldr	r3, [r3, #28]
 800168a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800168e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	495c      	ldr	r1, [pc, #368]	; (8001808 <HAL_I2C_Init+0x274>)
 8001698:	428b      	cmp	r3, r1
 800169a:	d819      	bhi.n	80016d0 <HAL_I2C_Init+0x13c>
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	1e59      	subs	r1, r3, #1
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80016aa:	1c59      	adds	r1, r3, #1
 80016ac:	f640 73fc 	movw	r3, #4092	; 0xffc
 80016b0:	400b      	ands	r3, r1
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d00a      	beq.n	80016cc <HAL_I2C_Init+0x138>
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	1e59      	subs	r1, r3, #1
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80016c4:	3301      	adds	r3, #1
 80016c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016ca:	e051      	b.n	8001770 <HAL_I2C_Init+0x1dc>
 80016cc:	2304      	movs	r3, #4
 80016ce:	e04f      	b.n	8001770 <HAL_I2C_Init+0x1dc>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d111      	bne.n	80016fc <HAL_I2C_Init+0x168>
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	1e58      	subs	r0, r3, #1
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6859      	ldr	r1, [r3, #4]
 80016e0:	460b      	mov	r3, r1
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	440b      	add	r3, r1
 80016e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80016ea:	3301      	adds	r3, #1
 80016ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	bf0c      	ite	eq
 80016f4:	2301      	moveq	r3, #1
 80016f6:	2300      	movne	r3, #0
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	e012      	b.n	8001722 <HAL_I2C_Init+0x18e>
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	1e58      	subs	r0, r3, #1
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6859      	ldr	r1, [r3, #4]
 8001704:	460b      	mov	r3, r1
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	440b      	add	r3, r1
 800170a:	0099      	lsls	r1, r3, #2
 800170c:	440b      	add	r3, r1
 800170e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001712:	3301      	adds	r3, #1
 8001714:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001718:	2b00      	cmp	r3, #0
 800171a:	bf0c      	ite	eq
 800171c:	2301      	moveq	r3, #1
 800171e:	2300      	movne	r3, #0
 8001720:	b2db      	uxtb	r3, r3
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <HAL_I2C_Init+0x196>
 8001726:	2301      	movs	r3, #1
 8001728:	e022      	b.n	8001770 <HAL_I2C_Init+0x1dc>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d10e      	bne.n	8001750 <HAL_I2C_Init+0x1bc>
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	1e58      	subs	r0, r3, #1
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6859      	ldr	r1, [r3, #4]
 800173a:	460b      	mov	r3, r1
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	440b      	add	r3, r1
 8001740:	fbb0 f3f3 	udiv	r3, r0, r3
 8001744:	3301      	adds	r3, #1
 8001746:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800174a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800174e:	e00f      	b.n	8001770 <HAL_I2C_Init+0x1dc>
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	1e58      	subs	r0, r3, #1
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6859      	ldr	r1, [r3, #4]
 8001758:	460b      	mov	r3, r1
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	440b      	add	r3, r1
 800175e:	0099      	lsls	r1, r3, #2
 8001760:	440b      	add	r3, r1
 8001762:	fbb0 f3f3 	udiv	r3, r0, r3
 8001766:	3301      	adds	r3, #1
 8001768:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800176c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001770:	6879      	ldr	r1, [r7, #4]
 8001772:	6809      	ldr	r1, [r1, #0]
 8001774:	4313      	orrs	r3, r2
 8001776:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	69da      	ldr	r2, [r3, #28]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6a1b      	ldr	r3, [r3, #32]
 800178a:	431a      	orrs	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	430a      	orrs	r2, r1
 8001792:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800179e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	6911      	ldr	r1, [r2, #16]
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	68d2      	ldr	r2, [r2, #12]
 80017aa:	4311      	orrs	r1, r2
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	6812      	ldr	r2, [r2, #0]
 80017b0:	430b      	orrs	r3, r1
 80017b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	68db      	ldr	r3, [r3, #12]
 80017ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	695a      	ldr	r2, [r3, #20]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	699b      	ldr	r3, [r3, #24]
 80017c6:	431a      	orrs	r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	430a      	orrs	r2, r1
 80017ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f042 0201 	orr.w	r2, r2, #1
 80017de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2220      	movs	r2, #32
 80017ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	000186a0 	.word	0x000186a0
 800180c:	001e847f 	.word	0x001e847f
 8001810:	003d08ff 	.word	0x003d08ff
 8001814:	431bde83 	.word	0x431bde83
 8001818:	10624dd3 	.word	0x10624dd3

0800181c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b088      	sub	sp, #32
 8001820:	af02      	add	r7, sp, #8
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	607a      	str	r2, [r7, #4]
 8001826:	461a      	mov	r2, r3
 8001828:	460b      	mov	r3, r1
 800182a:	817b      	strh	r3, [r7, #10]
 800182c:	4613      	mov	r3, r2
 800182e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001830:	f7ff fc16 	bl	8001060 <HAL_GetTick>
 8001834:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800183c:	b2db      	uxtb	r3, r3
 800183e:	2b20      	cmp	r3, #32
 8001840:	f040 80e0 	bne.w	8001a04 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	9300      	str	r3, [sp, #0]
 8001848:	2319      	movs	r3, #25
 800184a:	2201      	movs	r2, #1
 800184c:	4970      	ldr	r1, [pc, #448]	; (8001a10 <HAL_I2C_Master_Transmit+0x1f4>)
 800184e:	68f8      	ldr	r0, [r7, #12]
 8001850:	f000 fa92 	bl	8001d78 <I2C_WaitOnFlagUntilTimeout>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800185a:	2302      	movs	r3, #2
 800185c:	e0d3      	b.n	8001a06 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001864:	2b01      	cmp	r3, #1
 8001866:	d101      	bne.n	800186c <HAL_I2C_Master_Transmit+0x50>
 8001868:	2302      	movs	r3, #2
 800186a:	e0cc      	b.n	8001a06 <HAL_I2C_Master_Transmit+0x1ea>
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2201      	movs	r2, #1
 8001870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	2b01      	cmp	r3, #1
 8001880:	d007      	beq.n	8001892 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f042 0201 	orr.w	r2, r2, #1
 8001890:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2221      	movs	r2, #33	; 0x21
 80018a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2210      	movs	r2, #16
 80018ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2200      	movs	r2, #0
 80018b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	893a      	ldrh	r2, [r7, #8]
 80018c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018c8:	b29a      	uxth	r2, r3
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	4a50      	ldr	r2, [pc, #320]	; (8001a14 <HAL_I2C_Master_Transmit+0x1f8>)
 80018d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80018d4:	8979      	ldrh	r1, [r7, #10]
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	6a3a      	ldr	r2, [r7, #32]
 80018da:	68f8      	ldr	r0, [r7, #12]
 80018dc:	f000 f9ca 	bl	8001c74 <I2C_MasterRequestWrite>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e08d      	b.n	8001a06 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018ea:	2300      	movs	r3, #0
 80018ec:	613b      	str	r3, [r7, #16]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	695b      	ldr	r3, [r3, #20]
 80018f4:	613b      	str	r3, [r7, #16]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	613b      	str	r3, [r7, #16]
 80018fe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001900:	e066      	b.n	80019d0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001902:	697a      	ldr	r2, [r7, #20]
 8001904:	6a39      	ldr	r1, [r7, #32]
 8001906:	68f8      	ldr	r0, [r7, #12]
 8001908:	f000 fb0c 	bl	8001f24 <I2C_WaitOnTXEFlagUntilTimeout>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d00d      	beq.n	800192e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	2b04      	cmp	r3, #4
 8001918:	d107      	bne.n	800192a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001928:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e06b      	b.n	8001a06 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001932:	781a      	ldrb	r2, [r3, #0]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193e:	1c5a      	adds	r2, r3, #1
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001948:	b29b      	uxth	r3, r3
 800194a:	3b01      	subs	r3, #1
 800194c:	b29a      	uxth	r2, r3
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001956:	3b01      	subs	r3, #1
 8001958:	b29a      	uxth	r2, r3
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	695b      	ldr	r3, [r3, #20]
 8001964:	f003 0304 	and.w	r3, r3, #4
 8001968:	2b04      	cmp	r3, #4
 800196a:	d11b      	bne.n	80019a4 <HAL_I2C_Master_Transmit+0x188>
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001970:	2b00      	cmp	r3, #0
 8001972:	d017      	beq.n	80019a4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001978:	781a      	ldrb	r2, [r3, #0]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001984:	1c5a      	adds	r2, r3, #1
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800198e:	b29b      	uxth	r3, r3
 8001990:	3b01      	subs	r3, #1
 8001992:	b29a      	uxth	r2, r3
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800199c:	3b01      	subs	r3, #1
 800199e:	b29a      	uxth	r2, r3
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019a4:	697a      	ldr	r2, [r7, #20]
 80019a6:	6a39      	ldr	r1, [r7, #32]
 80019a8:	68f8      	ldr	r0, [r7, #12]
 80019aa:	f000 fafc 	bl	8001fa6 <I2C_WaitOnBTFFlagUntilTimeout>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d00d      	beq.n	80019d0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b8:	2b04      	cmp	r3, #4
 80019ba:	d107      	bne.n	80019cc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019ca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e01a      	b.n	8001a06 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d194      	bne.n	8001902 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2220      	movs	r2, #32
 80019ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2200      	movs	r2, #0
 80019f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2200      	movs	r2, #0
 80019fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001a00:	2300      	movs	r3, #0
 8001a02:	e000      	b.n	8001a06 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001a04:	2302      	movs	r3, #2
  }
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3718      	adds	r7, #24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	00100002 	.word	0x00100002
 8001a14:	ffff0000 	.word	0xffff0000

08001a18 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b08a      	sub	sp, #40	; 0x28
 8001a1c:	af02      	add	r7, sp, #8
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	607a      	str	r2, [r7, #4]
 8001a22:	603b      	str	r3, [r7, #0]
 8001a24:	460b      	mov	r3, r1
 8001a26:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001a28:	f7ff fb1a 	bl	8001060 <HAL_GetTick>
 8001a2c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2b20      	cmp	r3, #32
 8001a3c:	f040 8111 	bne.w	8001c62 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	9300      	str	r3, [sp, #0]
 8001a44:	2319      	movs	r3, #25
 8001a46:	2201      	movs	r2, #1
 8001a48:	4988      	ldr	r1, [pc, #544]	; (8001c6c <HAL_I2C_IsDeviceReady+0x254>)
 8001a4a:	68f8      	ldr	r0, [r7, #12]
 8001a4c:	f000 f994 	bl	8001d78 <I2C_WaitOnFlagUntilTimeout>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001a56:	2302      	movs	r3, #2
 8001a58:	e104      	b.n	8001c64 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d101      	bne.n	8001a68 <HAL_I2C_IsDeviceReady+0x50>
 8001a64:	2302      	movs	r3, #2
 8001a66:	e0fd      	b.n	8001c64 <HAL_I2C_IsDeviceReady+0x24c>
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d007      	beq.n	8001a8e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f042 0201 	orr.w	r2, r2, #1
 8001a8c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a9c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2224      	movs	r2, #36	; 0x24
 8001aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	4a70      	ldr	r2, [pc, #448]	; (8001c70 <HAL_I2C_IsDeviceReady+0x258>)
 8001ab0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ac0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	9300      	str	r3, [sp, #0]
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ace:	68f8      	ldr	r0, [r7, #12]
 8001ad0:	f000 f952 	bl	8001d78 <I2C_WaitOnFlagUntilTimeout>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d00d      	beq.n	8001af6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ae8:	d103      	bne.n	8001af2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001af0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e0b6      	b.n	8001c64 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001af6:	897b      	ldrh	r3, [r7, #10]
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	461a      	mov	r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001b04:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001b06:	f7ff faab 	bl	8001060 <HAL_GetTick>
 8001b0a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	695b      	ldr	r3, [r3, #20]
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	bf0c      	ite	eq
 8001b1a:	2301      	moveq	r3, #1
 8001b1c:	2300      	movne	r3, #0
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	695b      	ldr	r3, [r3, #20]
 8001b28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b30:	bf0c      	ite	eq
 8001b32:	2301      	moveq	r3, #1
 8001b34:	2300      	movne	r3, #0
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001b3a:	e025      	b.n	8001b88 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001b3c:	f7ff fa90 	bl	8001060 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	683a      	ldr	r2, [r7, #0]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d302      	bcc.n	8001b52 <HAL_I2C_IsDeviceReady+0x13a>
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d103      	bne.n	8001b5a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	22a0      	movs	r2, #160	; 0xa0
 8001b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	695b      	ldr	r3, [r3, #20]
 8001b60:	f003 0302 	and.w	r3, r3, #2
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	bf0c      	ite	eq
 8001b68:	2301      	moveq	r3, #1
 8001b6a:	2300      	movne	r3, #0
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	695b      	ldr	r3, [r3, #20]
 8001b76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b7e:	bf0c      	ite	eq
 8001b80:	2301      	moveq	r3, #1
 8001b82:	2300      	movne	r3, #0
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	2ba0      	cmp	r3, #160	; 0xa0
 8001b92:	d005      	beq.n	8001ba0 <HAL_I2C_IsDeviceReady+0x188>
 8001b94:	7dfb      	ldrb	r3, [r7, #23]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d102      	bne.n	8001ba0 <HAL_I2C_IsDeviceReady+0x188>
 8001b9a:	7dbb      	ldrb	r3, [r7, #22]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d0cd      	beq.n	8001b3c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2220      	movs	r2, #32
 8001ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	695b      	ldr	r3, [r3, #20]
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d129      	bne.n	8001c0a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bc4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	613b      	str	r3, [r7, #16]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	695b      	ldr	r3, [r3, #20]
 8001bd0:	613b      	str	r3, [r7, #16]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	613b      	str	r3, [r7, #16]
 8001bda:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	9300      	str	r3, [sp, #0]
 8001be0:	2319      	movs	r3, #25
 8001be2:	2201      	movs	r2, #1
 8001be4:	4921      	ldr	r1, [pc, #132]	; (8001c6c <HAL_I2C_IsDeviceReady+0x254>)
 8001be6:	68f8      	ldr	r0, [r7, #12]
 8001be8:	f000 f8c6 	bl	8001d78 <I2C_WaitOnFlagUntilTimeout>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e036      	b.n	8001c64 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2220      	movs	r2, #32
 8001bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001c06:	2300      	movs	r3, #0
 8001c08:	e02c      	b.n	8001c64 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c18:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001c22:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	9300      	str	r3, [sp, #0]
 8001c28:	2319      	movs	r3, #25
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	490f      	ldr	r1, [pc, #60]	; (8001c6c <HAL_I2C_IsDeviceReady+0x254>)
 8001c2e:	68f8      	ldr	r0, [r7, #12]
 8001c30:	f000 f8a2 	bl	8001d78 <I2C_WaitOnFlagUntilTimeout>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e012      	b.n	8001c64 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	3301      	adds	r3, #1
 8001c42:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	f4ff af32 	bcc.w	8001ab2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2220      	movs	r2, #32
 8001c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e000      	b.n	8001c64 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001c62:	2302      	movs	r3, #2
  }
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3720      	adds	r7, #32
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	00100002 	.word	0x00100002
 8001c70:	ffff0000 	.word	0xffff0000

08001c74 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b088      	sub	sp, #32
 8001c78:	af02      	add	r7, sp, #8
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	607a      	str	r2, [r7, #4]
 8001c7e:	603b      	str	r3, [r7, #0]
 8001c80:	460b      	mov	r3, r1
 8001c82:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c88:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	2b08      	cmp	r3, #8
 8001c8e:	d006      	beq.n	8001c9e <I2C_MasterRequestWrite+0x2a>
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d003      	beq.n	8001c9e <I2C_MasterRequestWrite+0x2a>
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001c9c:	d108      	bne.n	8001cb0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	e00b      	b.n	8001cc8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb4:	2b12      	cmp	r3, #18
 8001cb6:	d107      	bne.n	8001cc8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cc6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	9300      	str	r3, [sp, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001cd4:	68f8      	ldr	r0, [r7, #12]
 8001cd6:	f000 f84f 	bl	8001d78 <I2C_WaitOnFlagUntilTimeout>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d00d      	beq.n	8001cfc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cee:	d103      	bne.n	8001cf8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cf6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e035      	b.n	8001d68 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	691b      	ldr	r3, [r3, #16]
 8001d00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d04:	d108      	bne.n	8001d18 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d06:	897b      	ldrh	r3, [r7, #10]
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001d14:	611a      	str	r2, [r3, #16]
 8001d16:	e01b      	b.n	8001d50 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001d18:	897b      	ldrh	r3, [r7, #10]
 8001d1a:	11db      	asrs	r3, r3, #7
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	f003 0306 	and.w	r3, r3, #6
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	f063 030f 	orn	r3, r3, #15
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	490e      	ldr	r1, [pc, #56]	; (8001d70 <I2C_MasterRequestWrite+0xfc>)
 8001d36:	68f8      	ldr	r0, [r7, #12]
 8001d38:	f000 f875 	bl	8001e26 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e010      	b.n	8001d68 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001d46:	897b      	ldrh	r3, [r7, #10]
 8001d48:	b2da      	uxtb	r2, r3
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	4907      	ldr	r1, [pc, #28]	; (8001d74 <I2C_MasterRequestWrite+0x100>)
 8001d56:	68f8      	ldr	r0, [r7, #12]
 8001d58:	f000 f865 	bl	8001e26 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e000      	b.n	8001d68 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001d66:	2300      	movs	r3, #0
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3718      	adds	r7, #24
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	00010008 	.word	0x00010008
 8001d74:	00010002 	.word	0x00010002

08001d78 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	603b      	str	r3, [r7, #0]
 8001d84:	4613      	mov	r3, r2
 8001d86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d88:	e025      	b.n	8001dd6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d90:	d021      	beq.n	8001dd6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d92:	f7ff f965 	bl	8001060 <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	683a      	ldr	r2, [r7, #0]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d302      	bcc.n	8001da8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d116      	bne.n	8001dd6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2200      	movs	r2, #0
 8001dac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2220      	movs	r2, #32
 8001db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc2:	f043 0220 	orr.w	r2, r3, #32
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e023      	b.n	8001e1e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	0c1b      	lsrs	r3, r3, #16
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d10d      	bne.n	8001dfc <I2C_WaitOnFlagUntilTimeout+0x84>
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	695b      	ldr	r3, [r3, #20]
 8001de6:	43da      	mvns	r2, r3
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	4013      	ands	r3, r2
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	bf0c      	ite	eq
 8001df2:	2301      	moveq	r3, #1
 8001df4:	2300      	movne	r3, #0
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	461a      	mov	r2, r3
 8001dfa:	e00c      	b.n	8001e16 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	699b      	ldr	r3, [r3, #24]
 8001e02:	43da      	mvns	r2, r3
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	4013      	ands	r3, r2
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	bf0c      	ite	eq
 8001e0e:	2301      	moveq	r3, #1
 8001e10:	2300      	movne	r3, #0
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	461a      	mov	r2, r3
 8001e16:	79fb      	ldrb	r3, [r7, #7]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d0b6      	beq.n	8001d8a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3710      	adds	r7, #16
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b084      	sub	sp, #16
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	60f8      	str	r0, [r7, #12]
 8001e2e:	60b9      	str	r1, [r7, #8]
 8001e30:	607a      	str	r2, [r7, #4]
 8001e32:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e34:	e051      	b.n	8001eda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	695b      	ldr	r3, [r3, #20]
 8001e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e44:	d123      	bne.n	8001e8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e54:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001e5e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2200      	movs	r2, #0
 8001e64:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2220      	movs	r2, #32
 8001e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2200      	movs	r2, #0
 8001e72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	f043 0204 	orr.w	r2, r3, #4
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e046      	b.n	8001f1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e94:	d021      	beq.n	8001eda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e96:	f7ff f8e3 	bl	8001060 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d302      	bcc.n	8001eac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d116      	bne.n	8001eda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2220      	movs	r2, #32
 8001eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec6:	f043 0220 	orr.w	r2, r3, #32
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e020      	b.n	8001f1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	0c1b      	lsrs	r3, r3, #16
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d10c      	bne.n	8001efe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	695b      	ldr	r3, [r3, #20]
 8001eea:	43da      	mvns	r2, r3
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	4013      	ands	r3, r2
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	bf14      	ite	ne
 8001ef6:	2301      	movne	r3, #1
 8001ef8:	2300      	moveq	r3, #0
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	e00b      	b.n	8001f16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	43da      	mvns	r2, r3
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	bf14      	ite	ne
 8001f10:	2301      	movne	r3, #1
 8001f12:	2300      	moveq	r3, #0
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d18d      	bne.n	8001e36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3710      	adds	r7, #16
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f30:	e02d      	b.n	8001f8e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001f32:	68f8      	ldr	r0, [r7, #12]
 8001f34:	f000 f878 	bl	8002028 <I2C_IsAcknowledgeFailed>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e02d      	b.n	8001f9e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f48:	d021      	beq.n	8001f8e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f4a:	f7ff f889 	bl	8001060 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	68ba      	ldr	r2, [r7, #8]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d302      	bcc.n	8001f60 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d116      	bne.n	8001f8e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2200      	movs	r2, #0
 8001f64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2220      	movs	r2, #32
 8001f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7a:	f043 0220 	orr.w	r2, r3, #32
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e007      	b.n	8001f9e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	695b      	ldr	r3, [r3, #20]
 8001f94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f98:	2b80      	cmp	r3, #128	; 0x80
 8001f9a:	d1ca      	bne.n	8001f32 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3710      	adds	r7, #16
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b084      	sub	sp, #16
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	60f8      	str	r0, [r7, #12]
 8001fae:	60b9      	str	r1, [r7, #8]
 8001fb0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001fb2:	e02d      	b.n	8002010 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001fb4:	68f8      	ldr	r0, [r7, #12]
 8001fb6:	f000 f837 	bl	8002028 <I2C_IsAcknowledgeFailed>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e02d      	b.n	8002020 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fca:	d021      	beq.n	8002010 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fcc:	f7ff f848 	bl	8001060 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	68ba      	ldr	r2, [r7, #8]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d302      	bcc.n	8001fe2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d116      	bne.n	8002010 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2220      	movs	r2, #32
 8001fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffc:	f043 0220 	orr.w	r2, r3, #32
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e007      	b.n	8002020 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	695b      	ldr	r3, [r3, #20]
 8002016:	f003 0304 	and.w	r3, r3, #4
 800201a:	2b04      	cmp	r3, #4
 800201c:	d1ca      	bne.n	8001fb4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800201e:	2300      	movs	r3, #0
}
 8002020:	4618      	mov	r0, r3
 8002022:	3710      	adds	r7, #16
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800203a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800203e:	d11b      	bne.n	8002078 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002048:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2220      	movs	r2, #32
 8002054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002064:	f043 0204 	orr.w	r2, r3, #4
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e000      	b.n	800207a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
	...

08002088 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b086      	sub	sp, #24
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d101      	bne.n	800209a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e267      	b.n	800256a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d075      	beq.n	8002192 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020a6:	4b88      	ldr	r3, [pc, #544]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f003 030c 	and.w	r3, r3, #12
 80020ae:	2b04      	cmp	r3, #4
 80020b0:	d00c      	beq.n	80020cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020b2:	4b85      	ldr	r3, [pc, #532]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020ba:	2b08      	cmp	r3, #8
 80020bc:	d112      	bne.n	80020e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020be:	4b82      	ldr	r3, [pc, #520]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020ca:	d10b      	bne.n	80020e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020cc:	4b7e      	ldr	r3, [pc, #504]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d05b      	beq.n	8002190 <HAL_RCC_OscConfig+0x108>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d157      	bne.n	8002190 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e242      	b.n	800256a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020ec:	d106      	bne.n	80020fc <HAL_RCC_OscConfig+0x74>
 80020ee:	4b76      	ldr	r3, [pc, #472]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a75      	ldr	r2, [pc, #468]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 80020f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020f8:	6013      	str	r3, [r2, #0]
 80020fa:	e01d      	b.n	8002138 <HAL_RCC_OscConfig+0xb0>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002104:	d10c      	bne.n	8002120 <HAL_RCC_OscConfig+0x98>
 8002106:	4b70      	ldr	r3, [pc, #448]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a6f      	ldr	r2, [pc, #444]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 800210c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002110:	6013      	str	r3, [r2, #0]
 8002112:	4b6d      	ldr	r3, [pc, #436]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a6c      	ldr	r2, [pc, #432]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 8002118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800211c:	6013      	str	r3, [r2, #0]
 800211e:	e00b      	b.n	8002138 <HAL_RCC_OscConfig+0xb0>
 8002120:	4b69      	ldr	r3, [pc, #420]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a68      	ldr	r2, [pc, #416]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 8002126:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800212a:	6013      	str	r3, [r2, #0]
 800212c:	4b66      	ldr	r3, [pc, #408]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a65      	ldr	r2, [pc, #404]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 8002132:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002136:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d013      	beq.n	8002168 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002140:	f7fe ff8e 	bl	8001060 <HAL_GetTick>
 8002144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002146:	e008      	b.n	800215a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002148:	f7fe ff8a 	bl	8001060 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b64      	cmp	r3, #100	; 0x64
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e207      	b.n	800256a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800215a:	4b5b      	ldr	r3, [pc, #364]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d0f0      	beq.n	8002148 <HAL_RCC_OscConfig+0xc0>
 8002166:	e014      	b.n	8002192 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002168:	f7fe ff7a 	bl	8001060 <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800216e:	e008      	b.n	8002182 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002170:	f7fe ff76 	bl	8001060 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b64      	cmp	r3, #100	; 0x64
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e1f3      	b.n	800256a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002182:	4b51      	ldr	r3, [pc, #324]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1f0      	bne.n	8002170 <HAL_RCC_OscConfig+0xe8>
 800218e:	e000      	b.n	8002192 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002190:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	2b00      	cmp	r3, #0
 800219c:	d063      	beq.n	8002266 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800219e:	4b4a      	ldr	r3, [pc, #296]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f003 030c 	and.w	r3, r3, #12
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d00b      	beq.n	80021c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021aa:	4b47      	ldr	r3, [pc, #284]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021b2:	2b08      	cmp	r3, #8
 80021b4:	d11c      	bne.n	80021f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021b6:	4b44      	ldr	r3, [pc, #272]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d116      	bne.n	80021f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021c2:	4b41      	ldr	r3, [pc, #260]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d005      	beq.n	80021da <HAL_RCC_OscConfig+0x152>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d001      	beq.n	80021da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e1c7      	b.n	800256a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021da:	4b3b      	ldr	r3, [pc, #236]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	4937      	ldr	r1, [pc, #220]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ee:	e03a      	b.n	8002266 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d020      	beq.n	800223a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021f8:	4b34      	ldr	r3, [pc, #208]	; (80022cc <HAL_RCC_OscConfig+0x244>)
 80021fa:	2201      	movs	r2, #1
 80021fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021fe:	f7fe ff2f 	bl	8001060 <HAL_GetTick>
 8002202:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002204:	e008      	b.n	8002218 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002206:	f7fe ff2b 	bl	8001060 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	2b02      	cmp	r3, #2
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e1a8      	b.n	800256a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002218:	4b2b      	ldr	r3, [pc, #172]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d0f0      	beq.n	8002206 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002224:	4b28      	ldr	r3, [pc, #160]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	691b      	ldr	r3, [r3, #16]
 8002230:	00db      	lsls	r3, r3, #3
 8002232:	4925      	ldr	r1, [pc, #148]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 8002234:	4313      	orrs	r3, r2
 8002236:	600b      	str	r3, [r1, #0]
 8002238:	e015      	b.n	8002266 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800223a:	4b24      	ldr	r3, [pc, #144]	; (80022cc <HAL_RCC_OscConfig+0x244>)
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002240:	f7fe ff0e 	bl	8001060 <HAL_GetTick>
 8002244:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002246:	e008      	b.n	800225a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002248:	f7fe ff0a 	bl	8001060 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b02      	cmp	r3, #2
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e187      	b.n	800256a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800225a:	4b1b      	ldr	r3, [pc, #108]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1f0      	bne.n	8002248 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0308 	and.w	r3, r3, #8
 800226e:	2b00      	cmp	r3, #0
 8002270:	d036      	beq.n	80022e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d016      	beq.n	80022a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800227a:	4b15      	ldr	r3, [pc, #84]	; (80022d0 <HAL_RCC_OscConfig+0x248>)
 800227c:	2201      	movs	r2, #1
 800227e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002280:	f7fe feee 	bl	8001060 <HAL_GetTick>
 8002284:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002286:	e008      	b.n	800229a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002288:	f7fe feea 	bl	8001060 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b02      	cmp	r3, #2
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e167      	b.n	800256a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800229a:	4b0b      	ldr	r3, [pc, #44]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 800229c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d0f0      	beq.n	8002288 <HAL_RCC_OscConfig+0x200>
 80022a6:	e01b      	b.n	80022e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022a8:	4b09      	ldr	r3, [pc, #36]	; (80022d0 <HAL_RCC_OscConfig+0x248>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ae:	f7fe fed7 	bl	8001060 <HAL_GetTick>
 80022b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022b4:	e00e      	b.n	80022d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022b6:	f7fe fed3 	bl	8001060 <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d907      	bls.n	80022d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e150      	b.n	800256a <HAL_RCC_OscConfig+0x4e2>
 80022c8:	40023800 	.word	0x40023800
 80022cc:	42470000 	.word	0x42470000
 80022d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022d4:	4b88      	ldr	r3, [pc, #544]	; (80024f8 <HAL_RCC_OscConfig+0x470>)
 80022d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d1ea      	bne.n	80022b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0304 	and.w	r3, r3, #4
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	f000 8097 	beq.w	800241c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022ee:	2300      	movs	r3, #0
 80022f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022f2:	4b81      	ldr	r3, [pc, #516]	; (80024f8 <HAL_RCC_OscConfig+0x470>)
 80022f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d10f      	bne.n	800231e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022fe:	2300      	movs	r3, #0
 8002300:	60bb      	str	r3, [r7, #8]
 8002302:	4b7d      	ldr	r3, [pc, #500]	; (80024f8 <HAL_RCC_OscConfig+0x470>)
 8002304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002306:	4a7c      	ldr	r2, [pc, #496]	; (80024f8 <HAL_RCC_OscConfig+0x470>)
 8002308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800230c:	6413      	str	r3, [r2, #64]	; 0x40
 800230e:	4b7a      	ldr	r3, [pc, #488]	; (80024f8 <HAL_RCC_OscConfig+0x470>)
 8002310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002316:	60bb      	str	r3, [r7, #8]
 8002318:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800231a:	2301      	movs	r3, #1
 800231c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800231e:	4b77      	ldr	r3, [pc, #476]	; (80024fc <HAL_RCC_OscConfig+0x474>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002326:	2b00      	cmp	r3, #0
 8002328:	d118      	bne.n	800235c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800232a:	4b74      	ldr	r3, [pc, #464]	; (80024fc <HAL_RCC_OscConfig+0x474>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a73      	ldr	r2, [pc, #460]	; (80024fc <HAL_RCC_OscConfig+0x474>)
 8002330:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002334:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002336:	f7fe fe93 	bl	8001060 <HAL_GetTick>
 800233a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800233c:	e008      	b.n	8002350 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800233e:	f7fe fe8f 	bl	8001060 <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	2b02      	cmp	r3, #2
 800234a:	d901      	bls.n	8002350 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e10c      	b.n	800256a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002350:	4b6a      	ldr	r3, [pc, #424]	; (80024fc <HAL_RCC_OscConfig+0x474>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002358:	2b00      	cmp	r3, #0
 800235a:	d0f0      	beq.n	800233e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	2b01      	cmp	r3, #1
 8002362:	d106      	bne.n	8002372 <HAL_RCC_OscConfig+0x2ea>
 8002364:	4b64      	ldr	r3, [pc, #400]	; (80024f8 <HAL_RCC_OscConfig+0x470>)
 8002366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002368:	4a63      	ldr	r2, [pc, #396]	; (80024f8 <HAL_RCC_OscConfig+0x470>)
 800236a:	f043 0301 	orr.w	r3, r3, #1
 800236e:	6713      	str	r3, [r2, #112]	; 0x70
 8002370:	e01c      	b.n	80023ac <HAL_RCC_OscConfig+0x324>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	2b05      	cmp	r3, #5
 8002378:	d10c      	bne.n	8002394 <HAL_RCC_OscConfig+0x30c>
 800237a:	4b5f      	ldr	r3, [pc, #380]	; (80024f8 <HAL_RCC_OscConfig+0x470>)
 800237c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800237e:	4a5e      	ldr	r2, [pc, #376]	; (80024f8 <HAL_RCC_OscConfig+0x470>)
 8002380:	f043 0304 	orr.w	r3, r3, #4
 8002384:	6713      	str	r3, [r2, #112]	; 0x70
 8002386:	4b5c      	ldr	r3, [pc, #368]	; (80024f8 <HAL_RCC_OscConfig+0x470>)
 8002388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800238a:	4a5b      	ldr	r2, [pc, #364]	; (80024f8 <HAL_RCC_OscConfig+0x470>)
 800238c:	f043 0301 	orr.w	r3, r3, #1
 8002390:	6713      	str	r3, [r2, #112]	; 0x70
 8002392:	e00b      	b.n	80023ac <HAL_RCC_OscConfig+0x324>
 8002394:	4b58      	ldr	r3, [pc, #352]	; (80024f8 <HAL_RCC_OscConfig+0x470>)
 8002396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002398:	4a57      	ldr	r2, [pc, #348]	; (80024f8 <HAL_RCC_OscConfig+0x470>)
 800239a:	f023 0301 	bic.w	r3, r3, #1
 800239e:	6713      	str	r3, [r2, #112]	; 0x70
 80023a0:	4b55      	ldr	r3, [pc, #340]	; (80024f8 <HAL_RCC_OscConfig+0x470>)
 80023a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a4:	4a54      	ldr	r2, [pc, #336]	; (80024f8 <HAL_RCC_OscConfig+0x470>)
 80023a6:	f023 0304 	bic.w	r3, r3, #4
 80023aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d015      	beq.n	80023e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b4:	f7fe fe54 	bl	8001060 <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ba:	e00a      	b.n	80023d2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023bc:	f7fe fe50 	bl	8001060 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e0cb      	b.n	800256a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023d2:	4b49      	ldr	r3, [pc, #292]	; (80024f8 <HAL_RCC_OscConfig+0x470>)
 80023d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d0ee      	beq.n	80023bc <HAL_RCC_OscConfig+0x334>
 80023de:	e014      	b.n	800240a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023e0:	f7fe fe3e 	bl	8001060 <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023e6:	e00a      	b.n	80023fe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023e8:	f7fe fe3a 	bl	8001060 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e0b5      	b.n	800256a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023fe:	4b3e      	ldr	r3, [pc, #248]	; (80024f8 <HAL_RCC_OscConfig+0x470>)
 8002400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d1ee      	bne.n	80023e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800240a:	7dfb      	ldrb	r3, [r7, #23]
 800240c:	2b01      	cmp	r3, #1
 800240e:	d105      	bne.n	800241c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002410:	4b39      	ldr	r3, [pc, #228]	; (80024f8 <HAL_RCC_OscConfig+0x470>)
 8002412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002414:	4a38      	ldr	r2, [pc, #224]	; (80024f8 <HAL_RCC_OscConfig+0x470>)
 8002416:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800241a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	699b      	ldr	r3, [r3, #24]
 8002420:	2b00      	cmp	r3, #0
 8002422:	f000 80a1 	beq.w	8002568 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002426:	4b34      	ldr	r3, [pc, #208]	; (80024f8 <HAL_RCC_OscConfig+0x470>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f003 030c 	and.w	r3, r3, #12
 800242e:	2b08      	cmp	r3, #8
 8002430:	d05c      	beq.n	80024ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	2b02      	cmp	r3, #2
 8002438:	d141      	bne.n	80024be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800243a:	4b31      	ldr	r3, [pc, #196]	; (8002500 <HAL_RCC_OscConfig+0x478>)
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002440:	f7fe fe0e 	bl	8001060 <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002448:	f7fe fe0a 	bl	8001060 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e087      	b.n	800256a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800245a:	4b27      	ldr	r3, [pc, #156]	; (80024f8 <HAL_RCC_OscConfig+0x470>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1f0      	bne.n	8002448 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	69da      	ldr	r2, [r3, #28]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a1b      	ldr	r3, [r3, #32]
 800246e:	431a      	orrs	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002474:	019b      	lsls	r3, r3, #6
 8002476:	431a      	orrs	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800247c:	085b      	lsrs	r3, r3, #1
 800247e:	3b01      	subs	r3, #1
 8002480:	041b      	lsls	r3, r3, #16
 8002482:	431a      	orrs	r2, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002488:	061b      	lsls	r3, r3, #24
 800248a:	491b      	ldr	r1, [pc, #108]	; (80024f8 <HAL_RCC_OscConfig+0x470>)
 800248c:	4313      	orrs	r3, r2
 800248e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002490:	4b1b      	ldr	r3, [pc, #108]	; (8002500 <HAL_RCC_OscConfig+0x478>)
 8002492:	2201      	movs	r2, #1
 8002494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002496:	f7fe fde3 	bl	8001060 <HAL_GetTick>
 800249a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800249c:	e008      	b.n	80024b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800249e:	f7fe fddf 	bl	8001060 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d901      	bls.n	80024b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e05c      	b.n	800256a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024b0:	4b11      	ldr	r3, [pc, #68]	; (80024f8 <HAL_RCC_OscConfig+0x470>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d0f0      	beq.n	800249e <HAL_RCC_OscConfig+0x416>
 80024bc:	e054      	b.n	8002568 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024be:	4b10      	ldr	r3, [pc, #64]	; (8002500 <HAL_RCC_OscConfig+0x478>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c4:	f7fe fdcc 	bl	8001060 <HAL_GetTick>
 80024c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ca:	e008      	b.n	80024de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024cc:	f7fe fdc8 	bl	8001060 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e045      	b.n	800256a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024de:	4b06      	ldr	r3, [pc, #24]	; (80024f8 <HAL_RCC_OscConfig+0x470>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d1f0      	bne.n	80024cc <HAL_RCC_OscConfig+0x444>
 80024ea:	e03d      	b.n	8002568 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	699b      	ldr	r3, [r3, #24]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d107      	bne.n	8002504 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e038      	b.n	800256a <HAL_RCC_OscConfig+0x4e2>
 80024f8:	40023800 	.word	0x40023800
 80024fc:	40007000 	.word	0x40007000
 8002500:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002504:	4b1b      	ldr	r3, [pc, #108]	; (8002574 <HAL_RCC_OscConfig+0x4ec>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	699b      	ldr	r3, [r3, #24]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d028      	beq.n	8002564 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800251c:	429a      	cmp	r2, r3
 800251e:	d121      	bne.n	8002564 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800252a:	429a      	cmp	r2, r3
 800252c:	d11a      	bne.n	8002564 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002534:	4013      	ands	r3, r2
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800253a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800253c:	4293      	cmp	r3, r2
 800253e:	d111      	bne.n	8002564 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800254a:	085b      	lsrs	r3, r3, #1
 800254c:	3b01      	subs	r3, #1
 800254e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002550:	429a      	cmp	r2, r3
 8002552:	d107      	bne.n	8002564 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800255e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002560:	429a      	cmp	r2, r3
 8002562:	d001      	beq.n	8002568 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e000      	b.n	800256a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3718      	adds	r7, #24
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	40023800 	.word	0x40023800

08002578 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d101      	bne.n	800258c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e0cc      	b.n	8002726 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800258c:	4b68      	ldr	r3, [pc, #416]	; (8002730 <HAL_RCC_ClockConfig+0x1b8>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0307 	and.w	r3, r3, #7
 8002594:	683a      	ldr	r2, [r7, #0]
 8002596:	429a      	cmp	r2, r3
 8002598:	d90c      	bls.n	80025b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800259a:	4b65      	ldr	r3, [pc, #404]	; (8002730 <HAL_RCC_ClockConfig+0x1b8>)
 800259c:	683a      	ldr	r2, [r7, #0]
 800259e:	b2d2      	uxtb	r2, r2
 80025a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025a2:	4b63      	ldr	r3, [pc, #396]	; (8002730 <HAL_RCC_ClockConfig+0x1b8>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0307 	and.w	r3, r3, #7
 80025aa:	683a      	ldr	r2, [r7, #0]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d001      	beq.n	80025b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e0b8      	b.n	8002726 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d020      	beq.n	8002602 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0304 	and.w	r3, r3, #4
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d005      	beq.n	80025d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025cc:	4b59      	ldr	r3, [pc, #356]	; (8002734 <HAL_RCC_ClockConfig+0x1bc>)
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	4a58      	ldr	r2, [pc, #352]	; (8002734 <HAL_RCC_ClockConfig+0x1bc>)
 80025d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80025d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0308 	and.w	r3, r3, #8
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d005      	beq.n	80025f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025e4:	4b53      	ldr	r3, [pc, #332]	; (8002734 <HAL_RCC_ClockConfig+0x1bc>)
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	4a52      	ldr	r2, [pc, #328]	; (8002734 <HAL_RCC_ClockConfig+0x1bc>)
 80025ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80025ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025f0:	4b50      	ldr	r3, [pc, #320]	; (8002734 <HAL_RCC_ClockConfig+0x1bc>)
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	494d      	ldr	r1, [pc, #308]	; (8002734 <HAL_RCC_ClockConfig+0x1bc>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	2b00      	cmp	r3, #0
 800260c:	d044      	beq.n	8002698 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d107      	bne.n	8002626 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002616:	4b47      	ldr	r3, [pc, #284]	; (8002734 <HAL_RCC_ClockConfig+0x1bc>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d119      	bne.n	8002656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e07f      	b.n	8002726 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	2b02      	cmp	r3, #2
 800262c:	d003      	beq.n	8002636 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002632:	2b03      	cmp	r3, #3
 8002634:	d107      	bne.n	8002646 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002636:	4b3f      	ldr	r3, [pc, #252]	; (8002734 <HAL_RCC_ClockConfig+0x1bc>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d109      	bne.n	8002656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e06f      	b.n	8002726 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002646:	4b3b      	ldr	r3, [pc, #236]	; (8002734 <HAL_RCC_ClockConfig+0x1bc>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e067      	b.n	8002726 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002656:	4b37      	ldr	r3, [pc, #220]	; (8002734 <HAL_RCC_ClockConfig+0x1bc>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f023 0203 	bic.w	r2, r3, #3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	4934      	ldr	r1, [pc, #208]	; (8002734 <HAL_RCC_ClockConfig+0x1bc>)
 8002664:	4313      	orrs	r3, r2
 8002666:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002668:	f7fe fcfa 	bl	8001060 <HAL_GetTick>
 800266c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800266e:	e00a      	b.n	8002686 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002670:	f7fe fcf6 	bl	8001060 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	f241 3288 	movw	r2, #5000	; 0x1388
 800267e:	4293      	cmp	r3, r2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e04f      	b.n	8002726 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002686:	4b2b      	ldr	r3, [pc, #172]	; (8002734 <HAL_RCC_ClockConfig+0x1bc>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f003 020c 	and.w	r2, r3, #12
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	429a      	cmp	r2, r3
 8002696:	d1eb      	bne.n	8002670 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002698:	4b25      	ldr	r3, [pc, #148]	; (8002730 <HAL_RCC_ClockConfig+0x1b8>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0307 	and.w	r3, r3, #7
 80026a0:	683a      	ldr	r2, [r7, #0]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d20c      	bcs.n	80026c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026a6:	4b22      	ldr	r3, [pc, #136]	; (8002730 <HAL_RCC_ClockConfig+0x1b8>)
 80026a8:	683a      	ldr	r2, [r7, #0]
 80026aa:	b2d2      	uxtb	r2, r2
 80026ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ae:	4b20      	ldr	r3, [pc, #128]	; (8002730 <HAL_RCC_ClockConfig+0x1b8>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0307 	and.w	r3, r3, #7
 80026b6:	683a      	ldr	r2, [r7, #0]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d001      	beq.n	80026c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e032      	b.n	8002726 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0304 	and.w	r3, r3, #4
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d008      	beq.n	80026de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026cc:	4b19      	ldr	r3, [pc, #100]	; (8002734 <HAL_RCC_ClockConfig+0x1bc>)
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	4916      	ldr	r1, [pc, #88]	; (8002734 <HAL_RCC_ClockConfig+0x1bc>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0308 	and.w	r3, r3, #8
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d009      	beq.n	80026fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026ea:	4b12      	ldr	r3, [pc, #72]	; (8002734 <HAL_RCC_ClockConfig+0x1bc>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	00db      	lsls	r3, r3, #3
 80026f8:	490e      	ldr	r1, [pc, #56]	; (8002734 <HAL_RCC_ClockConfig+0x1bc>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026fe:	f000 f821 	bl	8002744 <HAL_RCC_GetSysClockFreq>
 8002702:	4602      	mov	r2, r0
 8002704:	4b0b      	ldr	r3, [pc, #44]	; (8002734 <HAL_RCC_ClockConfig+0x1bc>)
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	091b      	lsrs	r3, r3, #4
 800270a:	f003 030f 	and.w	r3, r3, #15
 800270e:	490a      	ldr	r1, [pc, #40]	; (8002738 <HAL_RCC_ClockConfig+0x1c0>)
 8002710:	5ccb      	ldrb	r3, [r1, r3]
 8002712:	fa22 f303 	lsr.w	r3, r2, r3
 8002716:	4a09      	ldr	r2, [pc, #36]	; (800273c <HAL_RCC_ClockConfig+0x1c4>)
 8002718:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800271a:	4b09      	ldr	r3, [pc, #36]	; (8002740 <HAL_RCC_ClockConfig+0x1c8>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4618      	mov	r0, r3
 8002720:	f7fe fc5a 	bl	8000fd8 <HAL_InitTick>

  return HAL_OK;
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	40023c00 	.word	0x40023c00
 8002734:	40023800 	.word	0x40023800
 8002738:	08004b0c 	.word	0x08004b0c
 800273c:	20000010 	.word	0x20000010
 8002740:	20000014 	.word	0x20000014

08002744 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002744:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002748:	b090      	sub	sp, #64	; 0x40
 800274a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800274c:	2300      	movs	r3, #0
 800274e:	637b      	str	r3, [r7, #52]	; 0x34
 8002750:	2300      	movs	r3, #0
 8002752:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002754:	2300      	movs	r3, #0
 8002756:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002758:	2300      	movs	r3, #0
 800275a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800275c:	4b59      	ldr	r3, [pc, #356]	; (80028c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f003 030c 	and.w	r3, r3, #12
 8002764:	2b08      	cmp	r3, #8
 8002766:	d00d      	beq.n	8002784 <HAL_RCC_GetSysClockFreq+0x40>
 8002768:	2b08      	cmp	r3, #8
 800276a:	f200 80a1 	bhi.w	80028b0 <HAL_RCC_GetSysClockFreq+0x16c>
 800276e:	2b00      	cmp	r3, #0
 8002770:	d002      	beq.n	8002778 <HAL_RCC_GetSysClockFreq+0x34>
 8002772:	2b04      	cmp	r3, #4
 8002774:	d003      	beq.n	800277e <HAL_RCC_GetSysClockFreq+0x3a>
 8002776:	e09b      	b.n	80028b0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002778:	4b53      	ldr	r3, [pc, #332]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x184>)
 800277a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800277c:	e09b      	b.n	80028b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800277e:	4b53      	ldr	r3, [pc, #332]	; (80028cc <HAL_RCC_GetSysClockFreq+0x188>)
 8002780:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002782:	e098      	b.n	80028b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002784:	4b4f      	ldr	r3, [pc, #316]	; (80028c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800278c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800278e:	4b4d      	ldr	r3, [pc, #308]	; (80028c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d028      	beq.n	80027ec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800279a:	4b4a      	ldr	r3, [pc, #296]	; (80028c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	099b      	lsrs	r3, r3, #6
 80027a0:	2200      	movs	r2, #0
 80027a2:	623b      	str	r3, [r7, #32]
 80027a4:	627a      	str	r2, [r7, #36]	; 0x24
 80027a6:	6a3b      	ldr	r3, [r7, #32]
 80027a8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80027ac:	2100      	movs	r1, #0
 80027ae:	4b47      	ldr	r3, [pc, #284]	; (80028cc <HAL_RCC_GetSysClockFreq+0x188>)
 80027b0:	fb03 f201 	mul.w	r2, r3, r1
 80027b4:	2300      	movs	r3, #0
 80027b6:	fb00 f303 	mul.w	r3, r0, r3
 80027ba:	4413      	add	r3, r2
 80027bc:	4a43      	ldr	r2, [pc, #268]	; (80028cc <HAL_RCC_GetSysClockFreq+0x188>)
 80027be:	fba0 1202 	umull	r1, r2, r0, r2
 80027c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80027c4:	460a      	mov	r2, r1
 80027c6:	62ba      	str	r2, [r7, #40]	; 0x28
 80027c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027ca:	4413      	add	r3, r2
 80027cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027d0:	2200      	movs	r2, #0
 80027d2:	61bb      	str	r3, [r7, #24]
 80027d4:	61fa      	str	r2, [r7, #28]
 80027d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027da:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80027de:	f7fd fcf9 	bl	80001d4 <__aeabi_uldivmod>
 80027e2:	4602      	mov	r2, r0
 80027e4:	460b      	mov	r3, r1
 80027e6:	4613      	mov	r3, r2
 80027e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027ea:	e053      	b.n	8002894 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027ec:	4b35      	ldr	r3, [pc, #212]	; (80028c4 <HAL_RCC_GetSysClockFreq+0x180>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	099b      	lsrs	r3, r3, #6
 80027f2:	2200      	movs	r2, #0
 80027f4:	613b      	str	r3, [r7, #16]
 80027f6:	617a      	str	r2, [r7, #20]
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80027fe:	f04f 0b00 	mov.w	fp, #0
 8002802:	4652      	mov	r2, sl
 8002804:	465b      	mov	r3, fp
 8002806:	f04f 0000 	mov.w	r0, #0
 800280a:	f04f 0100 	mov.w	r1, #0
 800280e:	0159      	lsls	r1, r3, #5
 8002810:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002814:	0150      	lsls	r0, r2, #5
 8002816:	4602      	mov	r2, r0
 8002818:	460b      	mov	r3, r1
 800281a:	ebb2 080a 	subs.w	r8, r2, sl
 800281e:	eb63 090b 	sbc.w	r9, r3, fp
 8002822:	f04f 0200 	mov.w	r2, #0
 8002826:	f04f 0300 	mov.w	r3, #0
 800282a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800282e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002832:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002836:	ebb2 0408 	subs.w	r4, r2, r8
 800283a:	eb63 0509 	sbc.w	r5, r3, r9
 800283e:	f04f 0200 	mov.w	r2, #0
 8002842:	f04f 0300 	mov.w	r3, #0
 8002846:	00eb      	lsls	r3, r5, #3
 8002848:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800284c:	00e2      	lsls	r2, r4, #3
 800284e:	4614      	mov	r4, r2
 8002850:	461d      	mov	r5, r3
 8002852:	eb14 030a 	adds.w	r3, r4, sl
 8002856:	603b      	str	r3, [r7, #0]
 8002858:	eb45 030b 	adc.w	r3, r5, fp
 800285c:	607b      	str	r3, [r7, #4]
 800285e:	f04f 0200 	mov.w	r2, #0
 8002862:	f04f 0300 	mov.w	r3, #0
 8002866:	e9d7 4500 	ldrd	r4, r5, [r7]
 800286a:	4629      	mov	r1, r5
 800286c:	028b      	lsls	r3, r1, #10
 800286e:	4621      	mov	r1, r4
 8002870:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002874:	4621      	mov	r1, r4
 8002876:	028a      	lsls	r2, r1, #10
 8002878:	4610      	mov	r0, r2
 800287a:	4619      	mov	r1, r3
 800287c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800287e:	2200      	movs	r2, #0
 8002880:	60bb      	str	r3, [r7, #8]
 8002882:	60fa      	str	r2, [r7, #12]
 8002884:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002888:	f7fd fca4 	bl	80001d4 <__aeabi_uldivmod>
 800288c:	4602      	mov	r2, r0
 800288e:	460b      	mov	r3, r1
 8002890:	4613      	mov	r3, r2
 8002892:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002894:	4b0b      	ldr	r3, [pc, #44]	; (80028c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	0c1b      	lsrs	r3, r3, #16
 800289a:	f003 0303 	and.w	r3, r3, #3
 800289e:	3301      	adds	r3, #1
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80028a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80028a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80028ae:	e002      	b.n	80028b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028b0:	4b05      	ldr	r3, [pc, #20]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x184>)
 80028b2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80028b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3740      	adds	r7, #64	; 0x40
 80028bc:	46bd      	mov	sp, r7
 80028be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028c2:	bf00      	nop
 80028c4:	40023800 	.word	0x40023800
 80028c8:	00f42400 	.word	0x00f42400
 80028cc:	017d7840 	.word	0x017d7840

080028d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028d4:	4b03      	ldr	r3, [pc, #12]	; (80028e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80028d6:	681b      	ldr	r3, [r3, #0]
}
 80028d8:	4618      	mov	r0, r3
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	20000010 	.word	0x20000010

080028e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80028ec:	f7ff fff0 	bl	80028d0 <HAL_RCC_GetHCLKFreq>
 80028f0:	4602      	mov	r2, r0
 80028f2:	4b05      	ldr	r3, [pc, #20]	; (8002908 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	0a9b      	lsrs	r3, r3, #10
 80028f8:	f003 0307 	and.w	r3, r3, #7
 80028fc:	4903      	ldr	r1, [pc, #12]	; (800290c <HAL_RCC_GetPCLK1Freq+0x24>)
 80028fe:	5ccb      	ldrb	r3, [r1, r3]
 8002900:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002904:	4618      	mov	r0, r3
 8002906:	bd80      	pop	{r7, pc}
 8002908:	40023800 	.word	0x40023800
 800290c:	08004b1c 	.word	0x08004b1c

08002910 <__itoa>:
 8002910:	1e93      	subs	r3, r2, #2
 8002912:	2b22      	cmp	r3, #34	; 0x22
 8002914:	b510      	push	{r4, lr}
 8002916:	460c      	mov	r4, r1
 8002918:	d904      	bls.n	8002924 <__itoa+0x14>
 800291a:	2300      	movs	r3, #0
 800291c:	700b      	strb	r3, [r1, #0]
 800291e:	461c      	mov	r4, r3
 8002920:	4620      	mov	r0, r4
 8002922:	bd10      	pop	{r4, pc}
 8002924:	2a0a      	cmp	r2, #10
 8002926:	d109      	bne.n	800293c <__itoa+0x2c>
 8002928:	2800      	cmp	r0, #0
 800292a:	da07      	bge.n	800293c <__itoa+0x2c>
 800292c:	232d      	movs	r3, #45	; 0x2d
 800292e:	700b      	strb	r3, [r1, #0]
 8002930:	4240      	negs	r0, r0
 8002932:	2101      	movs	r1, #1
 8002934:	4421      	add	r1, r4
 8002936:	f000 f805 	bl	8002944 <__utoa>
 800293a:	e7f1      	b.n	8002920 <__itoa+0x10>
 800293c:	2100      	movs	r1, #0
 800293e:	e7f9      	b.n	8002934 <__itoa+0x24>

08002940 <itoa>:
 8002940:	f7ff bfe6 	b.w	8002910 <__itoa>

08002944 <__utoa>:
 8002944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002946:	4c1f      	ldr	r4, [pc, #124]	; (80029c4 <__utoa+0x80>)
 8002948:	b08b      	sub	sp, #44	; 0x2c
 800294a:	4605      	mov	r5, r0
 800294c:	460b      	mov	r3, r1
 800294e:	466e      	mov	r6, sp
 8002950:	f104 0c20 	add.w	ip, r4, #32
 8002954:	6820      	ldr	r0, [r4, #0]
 8002956:	6861      	ldr	r1, [r4, #4]
 8002958:	4637      	mov	r7, r6
 800295a:	c703      	stmia	r7!, {r0, r1}
 800295c:	3408      	adds	r4, #8
 800295e:	4564      	cmp	r4, ip
 8002960:	463e      	mov	r6, r7
 8002962:	d1f7      	bne.n	8002954 <__utoa+0x10>
 8002964:	7921      	ldrb	r1, [r4, #4]
 8002966:	7139      	strb	r1, [r7, #4]
 8002968:	1e91      	subs	r1, r2, #2
 800296a:	6820      	ldr	r0, [r4, #0]
 800296c:	6038      	str	r0, [r7, #0]
 800296e:	2922      	cmp	r1, #34	; 0x22
 8002970:	f04f 0100 	mov.w	r1, #0
 8002974:	d904      	bls.n	8002980 <__utoa+0x3c>
 8002976:	7019      	strb	r1, [r3, #0]
 8002978:	460b      	mov	r3, r1
 800297a:	4618      	mov	r0, r3
 800297c:	b00b      	add	sp, #44	; 0x2c
 800297e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002980:	1e58      	subs	r0, r3, #1
 8002982:	4684      	mov	ip, r0
 8002984:	fbb5 f7f2 	udiv	r7, r5, r2
 8002988:	fb02 5617 	mls	r6, r2, r7, r5
 800298c:	3628      	adds	r6, #40	; 0x28
 800298e:	446e      	add	r6, sp
 8002990:	460c      	mov	r4, r1
 8002992:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8002996:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800299a:	462e      	mov	r6, r5
 800299c:	42b2      	cmp	r2, r6
 800299e:	f101 0101 	add.w	r1, r1, #1
 80029a2:	463d      	mov	r5, r7
 80029a4:	d9ee      	bls.n	8002984 <__utoa+0x40>
 80029a6:	2200      	movs	r2, #0
 80029a8:	545a      	strb	r2, [r3, r1]
 80029aa:	1919      	adds	r1, r3, r4
 80029ac:	1aa5      	subs	r5, r4, r2
 80029ae:	42aa      	cmp	r2, r5
 80029b0:	dae3      	bge.n	800297a <__utoa+0x36>
 80029b2:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80029b6:	780e      	ldrb	r6, [r1, #0]
 80029b8:	7006      	strb	r6, [r0, #0]
 80029ba:	3201      	adds	r2, #1
 80029bc:	f801 5901 	strb.w	r5, [r1], #-1
 80029c0:	e7f4      	b.n	80029ac <__utoa+0x68>
 80029c2:	bf00      	nop
 80029c4:	08004b24 	.word	0x08004b24

080029c8 <memset>:
 80029c8:	4402      	add	r2, r0
 80029ca:	4603      	mov	r3, r0
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d100      	bne.n	80029d2 <memset+0xa>
 80029d0:	4770      	bx	lr
 80029d2:	f803 1b01 	strb.w	r1, [r3], #1
 80029d6:	e7f9      	b.n	80029cc <memset+0x4>

080029d8 <__libc_init_array>:
 80029d8:	b570      	push	{r4, r5, r6, lr}
 80029da:	4d0d      	ldr	r5, [pc, #52]	; (8002a10 <__libc_init_array+0x38>)
 80029dc:	4c0d      	ldr	r4, [pc, #52]	; (8002a14 <__libc_init_array+0x3c>)
 80029de:	1b64      	subs	r4, r4, r5
 80029e0:	10a4      	asrs	r4, r4, #2
 80029e2:	2600      	movs	r6, #0
 80029e4:	42a6      	cmp	r6, r4
 80029e6:	d109      	bne.n	80029fc <__libc_init_array+0x24>
 80029e8:	4d0b      	ldr	r5, [pc, #44]	; (8002a18 <__libc_init_array+0x40>)
 80029ea:	4c0c      	ldr	r4, [pc, #48]	; (8002a1c <__libc_init_array+0x44>)
 80029ec:	f000 f818 	bl	8002a20 <_init>
 80029f0:	1b64      	subs	r4, r4, r5
 80029f2:	10a4      	asrs	r4, r4, #2
 80029f4:	2600      	movs	r6, #0
 80029f6:	42a6      	cmp	r6, r4
 80029f8:	d105      	bne.n	8002a06 <__libc_init_array+0x2e>
 80029fa:	bd70      	pop	{r4, r5, r6, pc}
 80029fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a00:	4798      	blx	r3
 8002a02:	3601      	adds	r6, #1
 8002a04:	e7ee      	b.n	80029e4 <__libc_init_array+0xc>
 8002a06:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a0a:	4798      	blx	r3
 8002a0c:	3601      	adds	r6, #1
 8002a0e:	e7f2      	b.n	80029f6 <__libc_init_array+0x1e>
 8002a10:	08004b54 	.word	0x08004b54
 8002a14:	08004b54 	.word	0x08004b54
 8002a18:	08004b54 	.word	0x08004b54
 8002a1c:	08004b58 	.word	0x08004b58

08002a20 <_init>:
 8002a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a22:	bf00      	nop
 8002a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a26:	bc08      	pop	{r3}
 8002a28:	469e      	mov	lr, r3
 8002a2a:	4770      	bx	lr

08002a2c <_fini>:
 8002a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a2e:	bf00      	nop
 8002a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a32:	bc08      	pop	{r3}
 8002a34:	469e      	mov	lr, r3
 8002a36:	4770      	bx	lr
